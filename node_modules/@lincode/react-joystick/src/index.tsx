import { useCurrentRef, useTruthy } from "@lincode/hooks"
import { distance, endPoint, rad2Deg } from "@lincode/math"
import React, { useEffect, useLayoutEffect, useState } from "react"
import { isMobile } from "react-device-detect"

const diameter = 100
const radius = diameter / 2

const useDrag = (cb: (e: { deltaX: number, deltaY: number }) => void) => {
    const [el, setEl] = useState<HTMLDivElement | null>(null)

    useEffect(() => {
        if (!el) return

        let down = false

        const getCenter = () => {
            const { left, right, top, bottom } = el.getBoundingClientRect()
            return { x: (left + right) / 2, y: (top + bottom) / 2 }
        }

        const onMouseDown = (e: MouseEvent) => {
            down = true
            const { x, y } = getCenter()
            cb({ deltaX: e.clientX - x, deltaY: e.clientY - y })
        }

        const onTouchStart = (e: TouchEvent) => {
            e.stopPropagation()
            e.preventDefault()
            down = true
            const { x, y } = getCenter()
            cb({ deltaX: e.targetTouches[0].clientX - x, deltaY: e.targetTouches[0].clientY - y })
        }

        const onMouseMove = (e: MouseEvent) => {
            if (!down) return
            const { x, y } = getCenter()
            cb({ deltaX: e.clientX - x, deltaY: e.clientY - y })
        }

        const onTouchMove = (e: TouchEvent) => {
            e.stopPropagation()
            if (!down) return
            const { x, y } = getCenter()
            cb({ deltaX: e.targetTouches[0].clientX - x, deltaY: e.targetTouches[0].clientY - y })
        }

        const onMouseUp = () => {
            down = false
            cb({ deltaX: 0, deltaY: 0 })
        }

        const onTouchEnd = (e: TouchEvent) => {
            e.stopPropagation()
            down = false
            cb({ deltaX: 0, deltaY: 0 })
        }

        if (isMobile) {
            el.addEventListener("touchstart", onTouchStart)
            el.addEventListener("touchmove", onTouchMove)
            el.addEventListener("touchend", onTouchEnd)
        }
        else {
            el.addEventListener("mousedown", onMouseDown)
            document.addEventListener("mousemove", onMouseMove)
            document.addEventListener("mouseup", onMouseUp)
        }

        return () => {
            if (isMobile) {
                el.removeEventListener("touchstart", onTouchStart)
                el.removeEventListener("touchmove", onTouchMove)
                el.removeEventListener("touchend", onTouchEnd)
            }
            else {
                el.removeEventListener("mousedown", onMouseDown)
                document.removeEventListener("mousemove", onMouseMove)
                document.removeEventListener("mouseup", onMouseUp)
            }
        }
    }, [el])

    return setEl
}

const circleElement = (
    <div style={{
        width: "100%",
        height: "100%",
        borderRadius: 9999,
        backgroundColor: "currentColor",
        border: "1px solid white",
        opacity: 0.25
    }} />
)

const Joystick: React.FC<React.HTMLProps<HTMLDivElement> & {
    onMove?: (e: { x: number, y: number, angle: number }) => void
    onMoveStart?: (e: { x: number, y: number, angle: number }) => void
    onMoveEnd?: (e: { x: number, y: number, angle: number }) => void
    position?: "top-left" | "top-right" | "bottom-left" | "bottom-right"
    outerElement?: JSX.Element
    innerElement?: JSX.Element

}> = ({ onMove, onMoveStart, onMoveEnd, position = "bottom-left", style, outerElement, innerElement, ...restProps }) => {

    const [delta, setDelta] = useState([0, 0, 0])
    const deltaRef = useCurrentRef(delta)

    const isMoved = delta[0] !== 0 || delta[1] !== 0
    const isMovedTruthy = useTruthy(isMoved)

    useLayoutEffect(() => {
        if (!isMovedTruthy) return

        const data = { x: 0, y: 0, angle: 0 }
        isMoved ? onMoveStart?.(data) : onMoveEnd?.(data)

        if (!isMoved) return

        let anim: number
        const loop = () => anim = requestAnimationFrame(() => {
            loop()
            const [x, y, angle] = deltaRef.current
            onMove?.({ x, y, angle })
        })
        loop()

        return () => {
            cancelAnimationFrame(anim)
        }
    }, [isMoved, isMovedTruthy])

    const setDragEl = useDrag(({ deltaX, deltaY }) => {
        const angle = Math.atan2(deltaY, deltaX) * rad2Deg
        const dist = Math.min(distance(0, 0, deltaX, deltaY), radius)
        const { x, y } = endPoint(0, 0, angle, dist)
        setDelta([x, y, angle])
    })

    const [ly, lx] = position.split("-")

    return (
        <div {...restProps} ref={setDragEl} style={{
            width: diameter,
            height: diameter,
            color: "#999999",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            position: "absolute",
            left: lx === "left" ? "0px" : undefined,
            right: lx === "right" ? "0px" : undefined,
            top: ly === "top" ? "0px" : undefined,
            bottom: ly === "bottom" ? "0px" : undefined,
            margin: "5%",
            ...style
        }}>
            <div style={{ position: "absolute", width: "100%", height: "100%" }}>
                {outerElement ?? circleElement}
            </div>
            <div style={{ width: radius, height: radius, transform: `translate(${delta[0]}px, ${delta[1]}px)` }}>
                {innerElement ?? circleElement}
            </div>
        </div>
    )
}

export default Joystick