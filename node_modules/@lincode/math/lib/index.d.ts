export declare class Point {
    x: number;
    y: number;
    constructor(x: number, y: number);
}
export declare class Point3d {
    x: number;
    y: number;
    z: number;
    constructor(x: number, y: number, z: number);
}
export declare class Size {
    width: number;
    height: number;
    constructor(width: number, height: number);
}
export declare type Line = [Point, Point];
declare type IntersectType = "parallel" | "colinear" | "none" | "intersect";
export declare class Intersect {
    type: IntersectType;
    point?: Point | undefined;
    constructor(type: IntersectType, point?: Point | undefined);
}
export declare const rad2Deg: number;
export declare const deg2Rad: number;
export declare const mapRange: (value: number, minFrom: number, maxFrom: number, minTo: number, maxTo: number, constrain?: boolean | undefined) => number;
export declare const rangeOverlap: (min0: number, max0: number, min1: number, max1: number) => number;
export declare const distance: (x0: number, y0: number, x1: number, y1: number) => number;
export declare const distance3d: (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => number;
export declare const geoDistance: (lng0: number, lat0: number, lng1: number, lat1: number) => number;
export declare const vertexAngle: (vertex: Point, pt1: Point, pt2: Point, reflex?: boolean | undefined) => number;
export declare const vertexAngle3d: (vertex: Point3d, pt1: Point3d, pt2: Point3d, reflex?: boolean | undefined) => number;
export declare const quaternion2Euler: (x: number, y: number, z: number, w: number) => Point3d;
export declare const polar2Cartesian: (centerX: number, centerY: number, radius: number, angle: number) => Point;
export declare const rotatePoint: (pt: Point, origin: Point, theta: number) => Point;
export declare const rotatedBoundingSize: (w: number, h: number, theta: number) => Size;
export declare const midPoint: (x0: number, y0: number, x1: number, y1: number) => Point;
export declare const centroid: (points: Array<Point>) => Point;
export declare const centroid3d: (points: Array<Point3d>) => Point3d;
export declare const wrapRange: (val: number, min: number, max: number) => number;
export declare const wrapDegree: (val: number) => number;
export declare const wrapRadian: (val: number) => number;
export declare const intersect: (line0: Line, line1: Line, lineSegment?: boolean) => Intersect;
export declare const normalIntersect: (line: Line, pt: Point) => Point;
export declare const quadrant: (x: number, y: number, originX: number, originY: number) => 1 | 2 | 3 | 4;
export declare const endPoint: (x: number, y: number, theta: number, dist: number) => Point;
export declare const polygonArea: (xList: Array<number>, yList: Array<number>) => number;
export declare class UnitBezier {
    private epsilon;
    private cx;
    private bx;
    private ax;
    private cy;
    private by;
    private ay;
    constructor(p1x: number, p1y: number, p2x: number, p2y: number);
    private sampleCurveX;
    private sampleCurveY;
    private sampleCurveDerivativeX;
    private solveCurveX;
    solve(x: number): number;
}
export declare class PerspectiveTransform {
    private srcX;
    private srcY;
    private dstX;
    private dstY;
    private srcMat;
    private dstMat;
    private warpMat;
    private dirty;
    setSource(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): void;
    setDestination(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): void;
    private computeSquareToQuad;
    private computeQuadToSquare;
    private multMats;
    private computeWarp;
    private warp;
    solve(srcX: number, srcY: number): Point;
}
export declare class LowPassFilter {
    private alpha;
    private maxDelta;
    private nOld;
    constructor(alpha?: number, maxDelta?: number);
    next(n: number, alpha?: number, maxDelta?: number): number;
}
export {};
