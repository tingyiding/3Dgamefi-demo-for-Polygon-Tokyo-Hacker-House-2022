import { Cancellable } from "@lincode/promiselikes"

class Event<Payload = void> {
    private cbs = new Set<(val: Payload) => void>()
    private state?: Payload

    public on(cb: (val: Payload) => void): Cancellable {
        if ("state" in this)
            cb(this.state!)
        
        this.cbs.add(cb)
        return new Cancellable(() => this.cbs.delete(cb))
    }
    
    public once(cb: (val: Payload) => void): Cancellable {
        const handle = new Cancellable()
        handle.watch(this.on(value => {
            handle.cancel()
            cb(value)
        }))
        return handle
    }

    public emit(value: Payload): void {
        for (const cb of this.cbs)
            cb(value)
    }

    public setState(value: Payload): void {
        if ("state" in this && this.state === value) return
        this.state = value
        this.emit(value)
    }

    public getState(): Payload | undefined {
        return this.state
    }
}

type Emit<T> = (val: T, isState?: boolean) => void
type On<T> = (cb: (val: T) => void, once?: boolean) => Cancellable
type GetState<T> = () => T | undefined

export default <T = void>() => {
    const event = new Event<T>()
    const emit: Emit<T> = (val: T) => event.emit(val)
    const on: On<T> = (cb: (val: T) => void, once?: boolean) => once ? event.once(cb) : event.on(cb)
    const emitState: Emit<T> = (val: T) => event.setState(val)
    const getState: GetState<T> = () => event.getState()
    return <const>[emit, on, emitState, getState]
}