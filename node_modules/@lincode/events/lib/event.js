import { Cancellable } from "@lincode/promiselikes";
class Event {
    constructor() {
        this.cbs = new Set();
    }
    on(cb) {
        if ("state" in this)
            cb(this.state);
        this.cbs.add(cb);
        return new Cancellable(() => this.cbs.delete(cb));
    }
    once(cb) {
        const handle = new Cancellable();
        handle.watch(this.on(value => {
            handle.cancel();
            cb(value);
        }));
        return handle;
    }
    emit(value) {
        for (const cb of this.cbs)
            cb(value);
    }
    setState(value) {
        if ("state" in this && this.state === value)
            return;
        this.state = value;
        this.emit(value);
    }
    getState() {
        return this.state;
    }
}
export default () => {
    const event = new Event();
    const emit = (val) => event.emit(val);
    const on = (cb, once) => once ? event.once(cb) : event.on(cb);
    const emitState = (val) => event.setState(val);
    const getState = () => event.getState();
    return [emit, on, emitState, getState];
};
