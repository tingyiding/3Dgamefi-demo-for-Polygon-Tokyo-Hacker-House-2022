import { Cancellable } from "@lincode/promiselikes";
import { forceGet } from "@lincode/utils";
export default class {
    constructor() {
        this.cbsMap = new Map();
    }
    on(name, cb) {
        var _a;
        if (Array.isArray(name)) {
            const handle = new Cancellable();
            for (const n of name)
                handle.watch(this.on(n, cb));
            return handle;
        }
        if ((_a = this.states) === null || _a === void 0 ? void 0 : _a.has(name))
            cb(this.states.get(name));
        const cbs = forceGet(this.cbsMap, name, () => new Set());
        cbs.add(cb);
        return new Cancellable(() => cbs.delete(cb));
    }
    once(name, cb) {
        const handle = new Cancellable();
        handle.watch(this.on(name, value => {
            handle.cancel();
            cb(value);
        }));
        return handle;
    }
    emit(name, value) {
        if (this.cbsMap.has(name))
            for (const cb of this.cbsMap.get(name))
                cb(value);
    }
    hasState(name) {
        var _a;
        return !!((_a = this.states) === null || _a === void 0 ? void 0 : _a.has(name));
    }
    setState(name, value) {
        var _a;
        (_a = this.states) !== null && _a !== void 0 ? _a : (this.states = new Map());
        if (this.states.has(name) && this.states.get(name) === value)
            return;
        this.states.set(name, value);
        this.emit(name, value);
    }
    getState(name) {
        var _a;
        return (_a = this.states) === null || _a === void 0 ? void 0 : _a.get(name);
    }
    deleteState(name) {
        var _a;
        (_a = this.states) === null || _a === void 0 ? void 0 : _a.delete(name);
    }
    clear() {
        var _a;
        this.cbsMap.clear();
        (_a = this.states) === null || _a === void 0 ? void 0 : _a.clear();
    }
}
