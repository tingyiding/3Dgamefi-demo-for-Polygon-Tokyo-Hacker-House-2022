import { valueof } from "@lincode/utils";
import { SetGlobalState, GetGlobalState } from "./store";
export declare const assign: <T extends Record<any, any> | undefined>(setState: SetGlobalState<T>, getState: GetGlobalState<T>) => (val: Partial<T>) => void;
export declare const merge: <T extends Record<any, any> | undefined>(setState: SetGlobalState<T>, getState: GetGlobalState<T>) => (val: Partial<T>) => void;
export declare const omit: <T extends Record<any, any> | undefined>(setState: SetGlobalState<T>, getState: GetGlobalState<T>) => (val: keyof T | (keyof T)[]) => void;
declare type Filter = {
    <T extends Record<any, any> | undefined>(setState: SetGlobalState<T>, getState: GetGlobalState<T>): (predicate: (v: valueof<T>, k: keyof T) => boolean) => void;
    <T>(setState: SetGlobalState<Array<T>>, getState: GetGlobalState<Array<T>>): (predicate: (v: T, i: number) => boolean) => void;
};
export declare const filter: Filter;
export declare const rename: <T extends string | Record<any, any> | string[] | undefined>(setState: SetGlobalState<T>, getState: GetGlobalState<T>) => (from: string, to: string) => void;
export declare const renameStartsWith: <T extends string | Record<any, any> | string[] | undefined>(setState: SetGlobalState<T>, getState: GetGlobalState<T>) => (from: string, to: string) => void;
export declare const push: <A>(setState: SetGlobalState<A[]>, getState: GetGlobalState<A[] | undefined>) => (val: A) => void;
export declare const pull: <A>(setState: SetGlobalState<A[]>, getState: GetGlobalState<A[] | undefined>) => (val: A) => void;
export declare const concat: <A>(setState: SetGlobalState<A[]>, getState: GetGlobalState<A[] | undefined>) => (val: A[]) => void;
export declare const refresh: <T extends any[] | Record<any, any> | undefined>(setState: SetGlobalState<T>, getState: GetGlobalState<T>) => () => void;
export declare const reset: <T extends any[] | Record<any, any> | undefined>(setState: SetGlobalState<T>, getState: GetGlobalState<T>) => () => void;
export {};
