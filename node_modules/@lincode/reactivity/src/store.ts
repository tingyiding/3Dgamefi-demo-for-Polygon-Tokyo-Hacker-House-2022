import { event } from "@lincode/events"
import { Cancellable } from "@lincode/promiselikes"

export type SetGlobalState<T> = (val: T) => void

export type GetGlobalState<T> = {
    (): T
    (cb: (val: T, handle: Cancellable) => void): Cancellable
}

const globalStateGetters = new WeakSet<Function>()

export const isGlobalState = <T>(getter: Function): getter is GetGlobalState<T> => (
    globalStateGetters.has(getter)
)

export const store = <T>(data: T): [SetGlobalState<T>, GetGlobalState<T>] => {
    const [, onData, setData, getData] = event<T>()
    setData(data)

    //@ts-ignore
    const getGlobalState: GetGlobalState<T> = (cb?: (val: T, handle: Cancellable) => void): T | Cancellable => {
        if (cb) {
            const handle = new Cancellable()
            handle.watch(onData(v => cb(v, handle)))
            return handle
        }
        return getData() as T
    }
    globalStateGetters.add(getGlobalState)

    return [setData, getGlobalState]
}