import { pull } from "@lincode/utils"

abstract class Thenable<T> {
    public done?: boolean = undefined
    private _value?: T = undefined
    private _callbacks?: Set<(val: T) => void> = undefined
    private _watched?: Set<Thenable<T>> = undefined

    public constructor(
        private _cb: ((val: T) => void) | undefined = undefined
    ) {}

    public then(cb: (val: T) => void): Cancellable {
        if (this.done) {
            cb(this._value!)
            return cancelled
        }
        ;(this._callbacks ??= new Set()).add(cb)
        return new Cancellable(() => this._callbacks!.delete(cb))
    }

    public watch<Item extends Thenable<T>>(item: Item): Item {
        if (this.done)
            return item._resolve(this._value!)

        ;(this._watched ??= new Set()).add(item)
        item.then(() => this._watched!.delete(item))
        
        return item
    }

    protected _resolve(val: T): this {
        if (this.done)
            return this

        this.done = true
        this._value = val

        this._cb?.(val)

        if (this._callbacks)
            for (const cb of this._callbacks)
                cb(val)

        if (this._watched)
            for (const item of this._watched)
                item._resolve(val)

        return this
    }
}

export class Resolvable<T = void> extends Thenable<T> {
    public constructor(cb?: (val: T) => void) {
        super(cb)
    }

    public resolve(val: T): this {
        return this._resolve(val)
    }
}

export class Cancellable extends Thenable<void> {
    public constructor(cb?: () => void) {
        super(cb)
    }

    public cancel(): this {
        return this._resolve()
    }
}

export class Disposable extends Thenable<void> {
    public constructor(cb?: () => void) {
        super(cb)
    }

    protected override _resolve(): this {
        this.dispose()
        return this
    }

    public dispose(): this {
        return super._resolve()
    }
}

const cancelled = new Cancellable().cancel()

export class Queue {
    private queue: Array<() => void> = []
    private count = 0

    public then(cb: () => void) {
        if ((this.count++) === 0) {
            cb()
            return cancelled
        }
        this.queue.push(cb)
        return new Cancellable(() => pull(this.queue, cb))
    }

    public resolve() {
        this.count--
        this.queue.shift()?.()
        return this
    }
}