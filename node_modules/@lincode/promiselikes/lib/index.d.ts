declare abstract class Thenable<T> {
    private _cb;
    done?: boolean;
    private _value?;
    private _callbacks?;
    private _watched?;
    constructor(_cb?: ((val: T) => void) | undefined);
    then(cb: (val: T) => void): Cancellable;
    watch<Item extends Thenable<T>>(item: Item): Item;
    protected _resolve(val: T): this;
}
export declare class Resolvable<T = void> extends Thenable<T> {
    constructor(cb?: (val: T) => void);
    resolve(val: T): this;
}
export declare class Cancellable extends Thenable<void> {
    constructor(cb?: () => void);
    cancel(): this;
}
export declare class Disposable extends Thenable<void> {
    constructor(cb?: () => void);
    protected _resolve(): this;
    dispose(): this;
}
export declare class Queue {
    private queue;
    private count;
    then(cb: () => void): Cancellable;
    resolve(): this;
}
export {};
