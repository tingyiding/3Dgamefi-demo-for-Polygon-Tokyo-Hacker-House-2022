import { debounce } from "@lincode/utils";
import { useEffect, useState } from "react";
export default (cb, disabled) => {
    const [el, setEl] = useState(null);
    const [dragOver, setDragOver] = useState(false);
    useEffect(() => {
        if (!el || disabled)
            return;
        const setDragOverDebounced = debounce((value) => setDragOver(value), 100, "trailing");
        let valueOld = false;
        const setDragOverTrack = (value) => {
            if (valueOld === value)
                return;
            valueOld = value;
            setDragOverDebounced(value);
        };
        const dragOverCb = (e) => {
            e.preventDefault();
            setDragOverTrack(true);
        };
        el.addEventListener("dragover", dragOverCb);
        const dragEnterCb = (e) => {
            e.preventDefault();
            setDragOverTrack(true);
        };
        el.addEventListener("dragenter", dragEnterCb);
        const dragLeaveCb = (e) => {
            e.preventDefault();
            setDragOverTrack(false);
        };
        el.addEventListener("dragleave", dragLeaveCb);
        const dropCb = (e) => {
            e.preventDefault();
            setDragOverTrack(false);
            cb(e);
        };
        el.addEventListener("drop", dropCb);
        return () => {
            el.removeEventListener("dragover", dragOverCb);
            el.removeEventListener("dragenter", dragEnterCb);
            el.removeEventListener("dragleave", dragLeaveCb);
            el.removeEventListener("drop", dropCb);
        };
    }, [el, disabled]);
    return [setEl, dragOver];
};
