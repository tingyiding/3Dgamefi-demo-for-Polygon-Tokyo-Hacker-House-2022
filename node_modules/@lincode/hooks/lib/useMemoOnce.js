import { useLayoutEffect, useMemo, useState } from "react";
import React from "react";
const log = console.log;
let cache = [];
const clear = () => cache = [];
const react18 = parseFloat(React.version) > 17;
const tracked = new WeakSet();
let strictMode = false;
export default (factory, cleanup, strictCleanUp) => {
    if (react18) {
        const value = useMemo(factory, []);
        const [tracker] = useState(() => {
            const tracker = {};
            queueMicrotask(() => {
                if (tracked.has(tracker))
                    return;
                strictMode = true;
                cleanup === null || cleanup === void 0 ? void 0 : cleanup(value);
            });
            return tracker;
        });
        useLayoutEffect(() => {
            if (tracked.has(tracker))
                return () => {
                    cleanup === null || cleanup === void 0 ? void 0 : cleanup(value);
                    strictCleanUp === null || strictCleanUp === void 0 ? void 0 : strictCleanUp(value);
                };
            tracked.add(tracker);
            return () => {
                queueMicrotask(() => {
                    if (strictMode)
                        return;
                    cleanup === null || cleanup === void 0 ? void 0 : cleanup(value);
                    strictCleanUp === null || strictCleanUp === void 0 ? void 0 : strictCleanUp(value);
                });
            };
        }, []);
        return value;
    }
    const [result] = useState(() => {
        if (log === console.log) {
            queueMicrotask(clear);
            const result = factory();
            cache.push(result);
            return result;
        }
        return cache.shift();
    });
    useLayoutEffect(() => {
        return () => {
            cleanup === null || cleanup === void 0 ? void 0 : cleanup(result);
            strictCleanUp === null || strictCleanUp === void 0 ? void 0 : strictCleanUp(result);
        };
    }, []);
    return result;
};
