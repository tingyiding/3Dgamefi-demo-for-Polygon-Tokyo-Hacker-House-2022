import { useLayoutEffect, useMemo, useState } from "react"
import React from "react"

const log = console.log
let cache: Array<any> = []
const clear = () => cache = []

const react18 = parseFloat(React.version) > 17
const tracked = new WeakSet<{}>()
let strictMode = false

export default <T>(factory: () => T, cleanup?: (val: T) => void, strictCleanUp?: (val: T) => void): T => {
    if (react18) {
        const value = useMemo(factory, [])

        const [tracker] = useState(() => {
            const tracker = {}
            queueMicrotask(() => {
                if (tracked.has(tracker)) return
                strictMode = true
                cleanup?.(value)
            })
            return tracker
        })

        useLayoutEffect(() => {
            if (tracked.has(tracker))
                return () => {
                    cleanup?.(value)
                    strictCleanUp?.(value)
                }
            tracked.add(tracker)

            return () => {
                queueMicrotask(() => {
                    if (strictMode) return
                    cleanup?.(value)
                    strictCleanUp?.(value)
                })
            }
        }, [])

        return value
    }

    const [result] = useState<T>(() => {
        if (log === console.log) {
            queueMicrotask(clear)
            const result = factory()
            cache.push(result)
            return result
        }
        return cache.shift()
    })
    
    useLayoutEffect(() => {
        return () => {
            cleanup?.(result)
            strictCleanUp?.(result)
        }
    }, [])

    return result
}