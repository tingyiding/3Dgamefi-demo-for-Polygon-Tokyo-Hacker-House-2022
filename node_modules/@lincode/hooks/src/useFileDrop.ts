import { debounce } from "@lincode/utils"
import { useEffect, useState } from "react"

export default (cb: (e: DragEvent) => void, disabled?: boolean) => {
    const [el, setEl] = useState<HTMLDivElement | null>(null)
    const [dragOver, setDragOver] = useState(false)

    useEffect(() => {
        if (!el || disabled) return

        const setDragOverDebounced = debounce((value: boolean) => setDragOver(value), 100, "trailing")

        let valueOld = false
        const setDragOverTrack = (value: boolean) => {
            if (valueOld === value) return
            valueOld = value

            setDragOverDebounced(value)
        }

        const dragOverCb = (e: DragEvent) => {
            e.preventDefault()
            setDragOverTrack(true)
        }
        el.addEventListener("dragover", dragOverCb)

        const dragEnterCb = (e: DragEvent) => {
            e.preventDefault()
            setDragOverTrack(true)
        }
        el.addEventListener("dragenter", dragEnterCb)

        const dragLeaveCb = (e: DragEvent) => {
            e.preventDefault()
            setDragOverTrack(false)
        }
        el.addEventListener("dragleave", dragLeaveCb)
        
        const dropCb = (e: DragEvent) => {
            e.preventDefault()
            setDragOverTrack(false)
            cb(e)
        }
        el.addEventListener("drop", dropCb)

        return () => {
            el.removeEventListener("dragover", dragOverCb)
            el.removeEventListener("dragenter", dragEnterCb)
            el.removeEventListener("dragleave", dragLeaveCb)
            el.removeEventListener("drop", dropCb)
        }
    }, [el, disabled])

    return <const>[setEl, dragOver]
}