import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
import { h } from "preact";
import { useEffect, useMemo, useRef, useState } from "preact/hooks";
import { preventTreeShake } from "@lincode/utils";
import ExpandIcon from "./icons/ExpandIcon";
import CollapseIcon from "./icons/CollapseIcon";
import { makeTreeItemCallbacks } from "./TreeItem";
import { useSceneGraphExpanded, useSceneGraphTarget } from "../states";
import ComponentIcon from "./icons/ComponentIcon";
import { setSceneGraphPreventDrag } from "../../states/useSceneGraphPreventDrag";
preventTreeShake(h);
document.addEventListener("mouseup", () => setSceneGraphPreventDrag(false));
const Object3DTreeItem = ({ appendable, object3d, level }) => {
    const expandIconStyle = { opacity: object3d.children.length ? 0.5 : 0.05, cursor: "pointer" };
    const [expanded, setExpanded] = useState(false);
    const [sceneGraphTarget] = useSceneGraphTarget();
    const { setClickEl, handleClick, handleDoubleClick } = makeTreeItemCallbacks(object3d, appendable);
    const [sceneGraphExpanded, setSceneGraphExpanded] = useSceneGraphExpanded();
    useEffect(() => {
        if (!sceneGraphExpanded)
            return;
        if (sceneGraphExpanded.has(object3d))
            setExpanded(true);
    }, [sceneGraphExpanded]);
    const startRef = useRef(null);
    const endRef = useRef(null);
    const selected = sceneGraphTarget === object3d;
    const highlightWidth = useMemo(() => {
        if (!selected || !startRef.current || !endRef.current)
            return;
        const boundsStart = startRef.current.getBoundingClientRect();
        const boundsEnd = endRef.current.getBoundingClientRect();
        return boundsEnd.right - boundsStart.left + 4;
    }, [selected, expanded]);
    return (_jsxs("div", { ref: setClickEl, onClick: handleClick, onDblClick: handleDoubleClick, onMouseDown: () => setSceneGraphPreventDrag(true), style: {
            color: "rgba(255, 255, 255, 0.75)",
            marginLeft: 8,
            borderLeft: "1px solid rgba(255, 255, 255, 0.05)"
        }, children: [_jsxs("div", { ref: startRef, style: {
                    display: "flex",
                    alignItems: "center",
                    border: selected ? "1px solid rgba(255, 255, 255, 0.5)" : undefined,
                    width: highlightWidth,
                    minWidth: "100%",
                    cursor: "default"
                }, children: [expanded ? (_jsx(CollapseIcon, { style: expandIconStyle, onClick: () => (setExpanded(false), setSceneGraphExpanded(undefined)) })) : (_jsx(ExpandIcon, { style: expandIconStyle, onClick: () => setExpanded(true) })), _jsx(ComponentIcon, {}), _jsx("div", { ref: endRef, children: object3d.name })] }), expanded && object3d.children.map(child => (_jsx(Object3DTreeItem, { object3d: child, appendable: appendable, level: level + 1 }, child.uuid)))] }));
};
export default Object3DTreeItem;
//# sourceMappingURL=Object3DTreeItem.js.map