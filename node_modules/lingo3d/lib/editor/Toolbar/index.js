import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
import { h } from "preact";
import register from "preact-custom-element";
import { preventTreeShake } from "@lincode/utils";
import TranslateIcon from "./icons/TranslateIcon";
import RotateIcon from "./icons/RotateIcon";
import ScaleIcon from "./icons/ScaleIcon";
import AbsoluteIcon from "./icons/AbsoluteIcon";
import RelativeIcon from "./icons/RelativeIcon";
import IconButton from "./IconButton";
import { useSelectionTarget, useTransformControlsMode, useTransformControlsSpace } from "../states";
import CursorIcon from "./icons/CursorIcon";
import Separator from "./Separator";
import ExportIcon from "./icons/ExportIcon";
import serialize from "../../api/serializer/serialize";
import OpenIcon from "./icons/OpenIcont";
import { fileOpen } from "browser-fs-access";
import deserialize from "../../api/serializer/deserialize";
import { appendableRoot } from "../../api/core/Appendable";
import ReactIcon from "./icons/ReactIcon";
import VueIcon from "./icons/VueIcon";
import saveTextFile from "./saveTextFile";
import serializeReact from "./serializeReact";
import serializeVue from "./serializeVue";
import SimpleObjectManager from "../../display/core/SimpleObjectManager";
import { useEffect, useLayoutEffect } from "preact/hooks";
import { emitEditorMountChange } from "../../events/onEditorMountChange";
preventTreeShake(h);
const handleSave = async () => {
    const prettier = (await import("prettier/standalone")).default;
    const parser = (await import("prettier/parser-babel")).default;
    const code = prettier.format(JSON.stringify(serialize()), { parser: "json", plugins: [parser] });
    saveTextFile("scene.json", code);
};
const handleOpen = async () => {
    const blob = await fileOpen({
        extensions: [".json"]
    });
    const text = await blob.text();
    for (const child of appendableRoot)
        child.dispose();
    try {
        deserialize(JSON.parse(text));
    }
    catch { }
};
const Toolbar = () => {
    const [mode, setMode] = useTransformControlsMode();
    let [space, setSpace] = useTransformControlsSpace();
    if (mode === "scale")
        space = "local";
    const [target] = useSelectionTarget();
    const isPositioned = target && !(target instanceof SimpleObjectManager);
    // const isStatic = target && !isPositionedItem(target)
    useLayoutEffect(() => {
        // if (isStatic)
        // setMode("select")
        if (isPositioned && (mode === "scale"))
            setMode("translate");
    }, [isPositioned]);
    useEffect(() => {
        emitEditorMountChange();
        return () => {
            emitEditorMountChange();
        };
    }, []);
    return (_jsx("div", { className: "lingo3d-ui", style: {
            width: 50,
            height: "100%",
            background: "rgb(40, 41, 46)",
            borderRight: "1px solid rgba(255, 255, 255, 0.05)",
            overflow: "hidden"
        }, children: _jsxs("div", { style: {
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                opacity: 0.75,
                paddingTop: 12
            }, children: [_jsx(IconButton, { active: mode === "select", onClick: () => setMode("select"), children: _jsx(CursorIcon, {}) }), _jsx(IconButton, { active: mode === "translate", onClick: () => setMode("translate"), children: _jsx(TranslateIcon, {}) }), _jsx(IconButton, { active: mode === "rotate", onClick: () => setMode("rotate"), children: _jsx(RotateIcon, {}) }), _jsx(IconButton, { active: mode === "scale", disabled: isPositioned, onClick: () => setMode("scale"), children: _jsx(ScaleIcon, {}) }), _jsx(Separator, {}), _jsx(IconButton, { active: space === "world", onClick: () => setSpace("world"), disabled: mode === "scale" || mode === "select", children: _jsx(AbsoluteIcon, {}) }), _jsx(IconButton, { active: space === "local", onClick: () => setSpace("local"), disabled: mode === "select", children: _jsx(RelativeIcon, {}) }), _jsx(Separator, {}), _jsx(IconButton, { onClick: handleOpen, children: _jsx(OpenIcon, {}) }), _jsx(IconButton, { onClick: handleSave, children: _jsx(ExportIcon, {}) }), _jsx(Separator, {}), _jsx(IconButton, { onClick: serializeReact, children: _jsx(ReactIcon, {}) }), _jsx(IconButton, { onClick: serializeVue, children: _jsx(VueIcon, {}) })] }) }));
};
register(Toolbar, "lingo3d-toolbar");
//# sourceMappingURL=index.js.map