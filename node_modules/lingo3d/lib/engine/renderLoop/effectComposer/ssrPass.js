import { SSRPass } from "three/examples/jsm/postprocessing/SSRPass";
import scene from "../../scene";
import { pull } from "@lincode/utils";
import { HEIGHT, WIDTH } from "../../../globals";
import { getRenderer } from "../../../states/useRenderer";
import { getCameraRendered } from "../../../states/useCameraRendered";
export const ssrPtr = [false];
const ssrSelects = [];
export const addSSR = (target) => {
    if (target.userData.ssr)
        return;
    target.userData.ssr = true;
    ssrSelects.push(target);
    ssrPtr[0] = true;
};
export const deleteSSR = (target) => {
    if (!target.userData.ssr)
        return;
    target.userData.ssr = false;
    pull(ssrSelects, target);
};
const ssrPass = new SSRPass({
    renderer: undefined,
    scene,
    camera: getCameraRendered(),
    width: WIDTH,
    height: HEIGHT,
    groundReflector: null,
    selects: ssrSelects
});
export default ssrPass;
getRenderer(renderer => renderer && (ssrPass.renderer = renderer));
getCameraRendered(camera => ssrPass.camera = camera);
//# sourceMappingURL=ssrPass.js.map