import { getSelectiveBloomComposer } from "../../../../states/useSelectiveBloomComposer";
import scene from "../../../scene";
export const bloomPtr = [false];
export const addBloom = (target) => {
    target.userData.bloom = true;
    bloomPtr[0] = true;
};
export const deleteBloom = (target) => {
    target.userData.bloom = false;
};
let sceneBackground;
const darkenRecursive = (children) => {
    for (const child of children) {
        if (child.userData.bloom) {
            child.renderOrder = 1;
            continue;
        }
        if (!child.visible)
            continue;
        darkenRecursive(child.children);
        child.material && (child.material.colorWrite = false);
        child.renderOrder = 0;
    }
};
const darken = () => {
    darkenRecursive(scene.children);
    if (scene.background) {
        sceneBackground = scene.background;
        scene.background = null;
    }
};
const restoreRecursive = (child) => child.material && (child.material.colorWrite = true);
const restore = () => {
    scene.traverse(restoreRecursive);
    sceneBackground && (scene.background = sceneBackground);
};
export default () => {
    darken();
    getSelectiveBloomComposer()?.render();
    restore();
};
//# sourceMappingURL=renderSelectiveBloom.js.map