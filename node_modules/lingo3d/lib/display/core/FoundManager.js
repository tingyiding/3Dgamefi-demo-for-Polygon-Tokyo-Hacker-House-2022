import { applyMixins } from "@lincode/utils";
import { MeshStandardMaterial } from "three";
import StaticObjectManager from "./StaticObjectManager";
import { foundDefaults, foundSchema } from "../../interface/IFound";
import TexturedBasicMixin from "./mixins/TexturedBasicMixin";
import TexturedStandardMixin from "./mixins/TexturedStandardMixin";
import { Cancellable } from "@lincode/promiselikes";
import { appendableRoot } from "../../api/core/Appendable";
class FoundManager extends StaticObjectManager {
    static componentName = "find";
    static defaults = foundDefaults;
    static schema = foundSchema;
    material;
    constructor(mesh) {
        // mesh.castShadow = true
        // mesh.receiveShadow = true
        super(mesh);
        //@ts-ignore
        this.material = mesh.material ??= new MeshStandardMaterial();
        appendableRoot.delete(this);
    }
    model;
    retargetAnimations() {
        if (!this.model?.animationManagers)
            return;
        for (const animationManager of Object.values(this.model.animationManagers))
            this.animations[animationManager.name] = this.watch(animationManager.retarget(this.object3d));
        this.model = undefined;
    }
    get animation() {
        return super.animation;
    }
    set animation(val) {
        this.retargetAnimations();
        super.animation = val;
    }
    dispose() {
        if (this.done)
            return this;
        super.dispose();
        this.material.dispose();
        return this;
    }
    managerSet;
    addToRaycastSet(set) {
        if (!this.managerSet) {
            this.managerSet = true;
            this.object3d.traverse(child => child.userData.manager = this);
        }
        set.add(this.object3d);
        return new Cancellable(() => set.delete(this.object3d));
    }
}
applyMixins(FoundManager, [TexturedStandardMixin, TexturedBasicMixin]);
export default FoundManager;
//# sourceMappingURL=FoundManager.js.map