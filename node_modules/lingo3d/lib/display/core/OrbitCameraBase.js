import { Reactive } from "@lincode/reactivity";
import { debounce } from "@lincode/utils";
import { onSceneGraphChange } from "../../events/onSceneGraphChange";
import CameraBase from "./CameraBase";
import { isMeshItem } from "./MeshItem";
const attachSet = new WeakSet();
export default class OrbitCameraBase extends CameraBase {
    constructor(camera) {
        super(camera);
        this.createEffect(() => {
            const target = this.targetState.get();
            if (!target)
                return;
            const handle = onSceneGraphChange(() => target.parent !== this && this.retarget());
            return () => {
                handle.cancel();
            };
        }, [this.targetState.get]);
    }
    manualTarget;
    targetState = new Reactive(undefined);
    retarget = debounce(() => {
        let target = this.manualTarget;
        for (const child of this.children ?? [])
            if (target) {
                if (child.outerObject3d.parent !== this.camera)
                    this.camera[attachSet.has(child) ? "attach" : "add"](child.outerObject3d);
            }
            else if (isMeshItem(child)) {
                target = child;
                const { parent } = this.outerObject3d;
                if (parent && child.outerObject3d.parent !== parent)
                    parent[attachSet.has(target) ? "attach" : "add"](target.outerObject3d);
            }
        this.targetState.set(target);
    }, 0, "trailing");
    append(object) {
        this._append(object);
        attachSet.delete(object);
        this.retarget();
    }
    attach(object) {
        this._append(object);
        attachSet.add(object);
        this.retarget();
    }
}
//# sourceMappingURL=OrbitCameraBase.js.map