import { Group, Mesh } from "three";
import { boxGeometry } from "../primitives/Cube";
import { wireframeMaterial } from "../utils/reusables";
import ObjectManager from "./ObjectManager";
import { addOutline, deleteOutline } from "../../engine/renderLoop/effectComposer/outlinePass";
import { addBloom, deleteBloom } from "../../engine/renderLoop/effectComposer/selectiveBloomPass/renderSelectiveBloom";
import { addSSR, deleteSSR } from "../../engine/renderLoop/effectComposer/ssrPass";
import Reresolvable from "./utils/Reresolvable";
import { Cancellable } from "@lincode/promiselikes";
export default class Loaded extends ObjectManager {
    loadedGroup = new Group();
    constructor() {
        super(new Mesh(boxGeometry, wireframeMaterial));
        this.outerObject3d.add(this.loadedGroup);
    }
    loaded = new Reresolvable();
    _src;
    srcCount = 0;
    get src() {
        return this._src;
    }
    set src(val) {
        if (this._src === val)
            return;
        this._src = val;
        const srcCount = ++this.srcCount;
        this.loaded.done && this.loadedGroup.clear();
        if (!val)
            return;
        this.load(val).then(loaded => {
            if (srcCount !== this.srcCount || this.done)
                return;
            const loadedObject3d = this.resolveLoaded(loaded);
            this.loadedGroup.add(loadedObject3d);
            this.loaded.resolve(loadedObject3d);
            this.object3d.visible = !!this._boxVisible;
        });
    }
    _onLoad;
    get onLoad() {
        return this._onLoad;
    }
    set onLoad(cb) {
        this._onLoad = cb;
        this.cancelHandle("onLoad", cb && (() => this.loaded.then(cb)));
    }
    widthSet;
    get width() {
        return super.width;
    }
    set width(val) {
        super.width = val;
        this.widthSet = true;
    }
    heightSet;
    get height() {
        return super.height;
    }
    set height(val) {
        super.height = val;
        this.heightSet = true;
    }
    depthSet;
    get depth() {
        return super.depth;
    }
    set depth(val) {
        super.depth = val;
        this.depthSet = true;
    }
    get innerRotationX() {
        return super.innerRotationX;
    }
    set innerRotationX(val) {
        super.innerRotationX = val;
        this.loadedGroup.rotation.x = this.object3d.rotation.x;
    }
    get innerRotationY() {
        return super.innerRotationY;
    }
    set innerRotationY(val) {
        super.innerRotationY = val;
        this.loadedGroup.rotation.y = this.object3d.rotation.y;
    }
    get innerRotationZ() {
        return super.innerRotationZ;
    }
    set innerRotationZ(val) {
        super.innerRotationZ = val;
        this.loadedGroup.rotation.z = this.object3d.rotation.z;
    }
    get innerX() {
        return super.innerX;
    }
    set innerX(val) {
        super.innerX = val;
        this.loadedGroup.position.x = this.object3d.position.x;
    }
    get innerY() {
        return super.innerY;
    }
    set innerY(val) {
        super.innerY = val;
        this.loadedGroup.position.y = this.object3d.position.y;
    }
    get innerZ() {
        return super.innerZ;
    }
    set innerZ(val) {
        super.innerZ = val;
        this.loadedGroup.position.z = this.object3d.position.z;
    }
    get innerVisible() {
        return this.loadedGroup.visible;
    }
    set innerVisible(val) {
        this.loadedGroup.visible = val;
    }
    get frustumCulled() {
        return this.outerObject3d.frustumCulled;
    }
    set frustumCulled(val) {
        if (this.outerObject3d.frustumCulled === val)
            return;
        this.outerObject3d.frustumCulled = val;
        this.cancelHandle("frustumCulled", () => this.loaded.then(() => {
            super.frustumCulled = val;
        }));
    }
    get physics() {
        return this._physics ?? false;
    }
    set physics(val) {
        if (this._physics === val)
            return;
        this._physics = val;
        const handle = this.cancelHandle("physics", () => this.loaded.then(() => {
            this.initPhysics(val, handle);
        }));
    }
    _boxVisible;
    get boxVisible() {
        return this._boxVisible ?? this.object3d.visible;
    }
    set boxVisible(val) {
        this._boxVisible = val;
        this.object3d.visible = val;
    }
    _outline;
    get outline() {
        return !!this._outline;
    }
    set outline(val) {
        if (this._outline === val)
            return;
        this._outline = val;
        this.cancelHandle("outline", () => this.loaded.then(loaded => {
            if (!val)
                return;
            addOutline(loaded);
            return () => {
                deleteOutline(loaded);
            };
        }));
    }
    _bloom;
    get bloom() {
        return !!this._bloom;
    }
    set bloom(val) {
        if (this._bloom === val)
            return;
        this._bloom = val;
        this.cancelHandle("bloom", () => this.loaded.then(loaded => {
            if (!val)
                return;
            addBloom(loaded);
            return () => {
                deleteBloom(loaded);
            };
        }));
    }
    _reflection;
    get reflection() {
        return !!this._reflection;
    }
    set reflection(val) {
        if (this._reflection === val)
            return;
        this._reflection = val;
        this.cancelHandle("reflection", () => this.loaded.then(loaded => {
            if (!val)
                return;
            addSSR(loaded);
            return () => {
                deleteSSR(loaded);
            };
        }));
    }
    managerSet;
    addToRaycastSet(set) {
        const handle = new Cancellable();
        queueMicrotask(() => {
            if (handle.done)
                return;
            if (this._physics === "map" || this._physics === "map-debug")
                handle.watch(this.loaded.then(loaded => {
                    if (!this.managerSet) {
                        this.managerSet = true;
                        loaded.traverse(child => child.userData.manager ??= this);
                    }
                    set.add(loaded);
                    return () => {
                        set.delete(loaded);
                    };
                }));
            else
                handle.watch(super.addToRaycastSet(set));
        });
        return handle;
    }
    refreshFactors() {
        this.cancelHandle("refreshFactors", () => this.loaded.then(() => super.refreshFactors()));
    }
}
//# sourceMappingURL=Loaded.js.map