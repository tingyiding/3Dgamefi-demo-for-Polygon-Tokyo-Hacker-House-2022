import { Point3d } from "@lincode/math";
import { Object3D } from "three";
import { Cancellable } from "@lincode/promiselikes";
import { LingoMouseEvent } from "../../../interface/IMouse";
import EventLoopItem from "../../../api/core/EventLoopItem";
import IStaticObjectManager from "../../../interface/IStaticObjectManaget";
import AnimationMixin from "../mixins/AnimationMixin";
import MeshItem from "../MeshItem";
export declare const idMap: Map<string, Set<StaticObjectManager<Object3D<import("three").Event>>>>;
declare class StaticObjectManager<T extends Object3D = Object3D> extends EventLoopItem implements IStaticObjectManager {
    object3d: T;
    constructor(object3d: T);
    dispose(): this;
    protected _id?: string;
    get id(): string | undefined;
    set id(val: string | undefined);
    protected addToRaycastSet(set: Set<Object3D>): Cancellable;
    private _onClick?;
    get onClick(): ((e: LingoMouseEvent) => void) | undefined;
    set onClick(cb: ((e: LingoMouseEvent) => void) | undefined);
    private _onMouseDown?;
    get onMouseDown(): ((e: LingoMouseEvent) => void) | undefined;
    set onMouseDown(cb: ((e: LingoMouseEvent) => void) | undefined);
    private _onMouseUp?;
    get onMouseUp(): ((e: LingoMouseEvent) => void) | undefined;
    set onMouseUp(cb: ((e: LingoMouseEvent) => void) | undefined);
    private _onMouseOver?;
    get onMouseOver(): ((e: LingoMouseEvent) => void) | undefined;
    set onMouseOver(cb: ((e: LingoMouseEvent) => void) | undefined);
    private _onMouseOut?;
    get onMouseOut(): ((e: LingoMouseEvent) => void) | undefined;
    set onMouseOut(cb: ((e: LingoMouseEvent) => void) | undefined);
    private _onMouseMove?;
    get onMouseMove(): ((e: LingoMouseEvent) => void) | undefined;
    set onMouseMove(cb: ((e: LingoMouseEvent) => void) | undefined);
    get name(): string;
    set name(val: string);
    protected getRay(): import("three").Ray;
    pointAt(distance: number): Point3d;
    rayIntersectsAt(target: StaticObjectManager, maxDistance?: number): Point3d | undefined;
    rayIntersects(target: StaticObjectManager): boolean;
    intersects(target: StaticObjectManager): boolean;
    get clientX(): number;
    get clientY(): number;
    get reflection(): boolean;
    set reflection(val: boolean);
    get bloom(): boolean;
    set bloom(val: boolean);
    get outline(): boolean;
    set outline(val: boolean);
    private _visible?;
    get visible(): boolean;
    set visible(val: boolean);
    get frustumCulled(): boolean;
    set frustumCulled(val: boolean);
    private _refreshFactors?;
    protected refreshFactors(): void;
    private _metalnessFactor?;
    get metalnessFactor(): number | undefined;
    set metalnessFactor(val: number | undefined);
    private _roughnessFactor?;
    get roughnessFactor(): number | undefined;
    set roughnessFactor(val: number | undefined);
    private _opacityFactor?;
    get opacityFactor(): number | undefined;
    set opacityFactor(val: number | undefined);
    private _emissiveIntensityFactor?;
    get emissiveIntensityFactor(): number | undefined;
    set emissiveIntensityFactor(val: number | undefined);
    private _emissiveColorFactor?;
    get emissiveColorFactor(): string | undefined;
    set emissiveColorFactor(val: string | undefined);
    private _colorFactor?;
    get colorFactor(): string | undefined;
    set colorFactor(val: string | undefined);
    private _toon?;
    get toon(): boolean;
    set toon(val: boolean);
    private _pbr?;
    get pbr(): boolean;
    set pbr(val: boolean);
    get frustumVisible(): boolean;
    lookAt(target: MeshItem | Point3d): void;
    lookAt(x: number, y: number | undefined, z: number): void;
    onLookToEnd: (() => void) | undefined;
    lookTo(target: MeshItem | Point3d, alpha: number): void;
    lookTo(x: number, y: number | undefined, z: number, alpha: number): void;
}
interface StaticObjectManager<T extends Object3D = Object3D> extends EventLoopItem, AnimationMixin {
}
export default StaticObjectManager;
