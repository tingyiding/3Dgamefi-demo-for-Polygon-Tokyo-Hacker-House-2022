import { Cancellable } from "@lincode/promiselikes";
import { Color } from "three";
import mainCamera from "../../engine/mainCamera";
import scene from "../../engine/scene";
import { onBeforeRender } from "../../events/onBeforeRender";
import { emitSelectionTarget, onSelectionTarget } from "../../events/onSelectionTarget";
import { getCameraRendered } from "../../states/useCameraRendered";
import ObjectManager from "./ObjectManager";
import makeLightSprite from "./utils/makeLightSprite";
export default class LightBase extends ObjectManager {
    constructor(light, Helper) {
        super(light);
        this.createEffect(() => {
            if (getCameraRendered() !== mainCamera)
                return;
            const handle = new Cancellable();
            const sprite = makeLightSprite();
            handle.watch(onSelectionTarget(({ target }) => {
                target === sprite && emitSelectionTarget(this);
            }));
            if (Helper) {
                const helper = new Helper(this.object3d);
                scene.add(helper);
                helper.add(sprite.outerObject3d);
                if ("update" in helper)
                    handle.watch(onBeforeRender(() => {
                        //@ts-ignore
                        helper.update();
                    }));
                handle.then(() => {
                    helper.dispose();
                    scene.remove(helper);
                });
            }
            else
                this.outerObject3d.add(sprite.outerObject3d);
            return () => {
                sprite.dispose();
                handle.cancel();
            };
        }, [getCameraRendered]);
    }
    dispose() {
        if (this.done)
            return this;
        super.dispose();
        this.object3d.dispose();
        return this;
    }
    get color() {
        return "#" + this.object3d.color.getHexString();
    }
    set color(val) {
        this.object3d.color = new Color(val);
    }
    get intensity() {
        return this.object3d.intensity;
    }
    set intensity(val) {
        this.object3d.intensity = val;
    }
}
//# sourceMappingURL=LightBase.js.map