import { Point3d } from "@lincode/math";
import { Object3D } from "three";
import ISimpleObjectManager, { OnIntersectValue } from "../../../interface/ISimpleObjectManager";
import PositionedItem from "../../../api/core/PositionedItem";
import StaticObjectManager from "../StaticObjectManager";
import PhysicsMixin from "../mixins/PhysicsMixin";
import { Cancellable } from "@lincode/promiselikes";
import MeshItem from "../MeshItem";
declare class SimpleObjectManager<T extends Object3D = Object3D> extends StaticObjectManager<T> implements ISimpleObjectManager {
    object3d: T;
    getRayIntersectionsAt(id: string, maxDistance?: number): [StaticObjectManager<Object3D<import("three").Event>>, Point3d][];
    getRayIntersections(id: string, maxDistance?: number): StaticObjectManager<Object3D<import("three").Event>>[];
    listenToRayIntersection(id: string, cb: (target: StaticObjectManager, pt: Point3d) => void, maxDistance?: number): Cancellable;
    getIntersections(id: string): StaticObjectManager<Object3D<import("three").Event>>[];
    listenToIntersection(id: string, cb?: OnIntersectValue, cbOut?: OnIntersectValue): Cancellable;
    private onIntersectState?;
    private onIntersectOutState?;
    private intersectIdsState?;
    private initIntersect;
    get onIntersect(): OnIntersectValue | undefined;
    set onIntersect(val: OnIntersectValue | undefined);
    get onIntersectOut(): OnIntersectValue | undefined;
    set onIntersectOut(val: OnIntersectValue | undefined);
    get intersectIds(): Array<string> | undefined;
    set intersectIds(val: Array<string> | undefined);
    intersects(target: StaticObjectManager): boolean;
    get width(): number;
    set width(val: number);
    get height(): number;
    set height(val: number);
    get depth(): number;
    set depth(val: number);
    get x(): number;
    set x(val: number);
    get y(): number;
    set y(val: number);
    get z(): number;
    set z(val: number);
    get scaleX(): number;
    set scaleX(val: number);
    get scaleY(): number;
    set scaleY(val: number);
    get scaleZ(): number;
    set scaleZ(val: number);
    get scale(): number;
    set scale(val: number);
    get rotationX(): number;
    set rotationX(val: number);
    get rotationY(): number;
    set rotationY(val: number);
    get rotationZ(): number;
    set rotationZ(val: number);
    get rotation(): number;
    set rotation(val: number);
    get innerVisible(): boolean;
    set innerVisible(val: boolean);
    lookAt(target: MeshItem | Point3d): void;
    lookAt(x: number, y: number | undefined, z: number): void;
    translateX(val: number): void;
    translateY(val: number): void;
    translateZ(val: number): void;
    placeAt(object: MeshItem | Point3d): void;
    moveForward(distance: number): void;
    moveRight(distance: number): void;
    onMoveToEnd: (() => void) | undefined;
    lerpTo(x: number, y: number, z: number, alpha: number): void;
    moveTo(x: number, y: number | undefined, z: number, speed: number): void;
}
interface SimpleObjectManager<T extends Object3D = Object3D> extends StaticObjectManager, PositionedItem, PhysicsMixin {
}
export default SimpleObjectManager;
