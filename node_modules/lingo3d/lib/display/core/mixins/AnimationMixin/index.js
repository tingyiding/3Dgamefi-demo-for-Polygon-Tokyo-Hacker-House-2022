import { debounce } from "@lincode/utils";
import AnimationManager from "./AnimationManager";
import EventLoopItem from "../../../../api/core/EventLoopItem";
const buildAnimationTracks = debounce((val) => {
    const entries = Object.entries(val);
    let maxLength = 0;
    for (const [, { length }] of entries)
        length > maxLength && (maxLength = length);
    const duration = 1000;
    const timeStep = duration * 0.001 / maxLength;
    const result = {};
    for (const [name, values] of entries)
        result[name] = Object.fromEntries(values.map((v, i) => [(i * timeStep).toFixed(2), v]));
    return result;
}, 0, "trailingPromise");
export default class AnimationMixin extends EventLoopItem {
    animationManagers;
    get animations() {
        return this.animationManagers ??= {};
    }
    set animations(val) {
        this.animationManagers = val;
    }
    createAnimation(name) {
        if (name in this.animations) {
            const animation = this.animations[name];
            if (typeof animation !== "string")
                return animation;
        }
        const animation = this.watch(new AnimationManager(name, this));
        this.animations[name] = animation;
        return animation;
    }
    buildAnimation(val) {
        buildAnimationTracks(val).then(tracks => {
            const name = "lingo3d-animation";
            this.createAnimation(name).setTracks(tracks);
            this.playAnimation(name);
        });
    }
    makeAnimationProxy(source) {
        return new Proxy(source, {
            get: (anim, prop) => {
                return anim[prop];
            },
            set: (anim, prop, value) => {
                anim[prop] = value;
                this.buildAnimation(anim);
                return true;
            }
        });
    }
    loadingAnims;
    async loadingAnimsAsync() {
        await new Promise(resolve => setTimeout(resolve));
        if (this.loadingAnims) {
            await Promise.all(this.loadingAnims);
            this.loadingAnims = undefined;
        }
    }
    animationManager;
    get animationPaused() {
        return this.animationManager?.getPaused();
    }
    set animationPaused(value) {
        this.loadingAnimsAsync().then(() => {
            if (this.done)
                return;
            this.animationManager?.setPaused(!!value);
        });
    }
    animationRepeat;
    onAnimationFinish;
    async playAnimation(name, o) {
        await this.loadingAnimsAsync();
        if (this.done)
            return;
        this.animationManager = typeof name === "string"
            ? this.animations[name]
            : Object.values(this.animations)[name ?? 0];
        this.animationManager?.play(o);
    }
    async stopAnimation() {
        await this.loadingAnimsAsync();
        if (this.done)
            return;
        this.animationManager?.stop();
    }
    animationName;
    setAnimation(val, o) {
        this._animation = val;
        if (typeof val === "string" || typeof val === "number") {
            this.animationName = val;
            this.playAnimation(val, o);
            return;
        }
        if (typeof val === "boolean") {
            val ? this.playAnimation(undefined, o) : this.stopAnimation();
            return;
        }
        if (!val) {
            this.stopAnimation();
            return;
        }
        this._animation = this.makeAnimationProxy(val);
        this.buildAnimation(val);
    }
    _animation;
    get animation() {
        return this._animation;
    }
    set animation(val) {
        if (Array.isArray(val)) {
            let currentIndex = 0;
            const o = {
                onFinish: () => {
                    if (++currentIndex >= val.length) {
                        if (this.animationRepeat === false) {
                            this.onAnimationFinish?.();
                            return;
                        }
                        currentIndex = 0;
                    }
                    this.setAnimation(val[currentIndex], o);
                },
                repeat: false
            };
            this.setAnimation(val[0], o);
            return;
        }
        this.queueMicrotask(() => this.setAnimation(val, {
            repeat: this.animationRepeat, onFinish: this.onAnimationFinish
        }));
    }
}
//# sourceMappingURL=index.js.map