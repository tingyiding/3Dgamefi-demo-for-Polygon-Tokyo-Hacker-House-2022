import { Color, RepeatWrapping, Vector2, VideoTexture } from "three";
import loadTexture from "../../utils/loaders/loadTexture";
import { objectURLMapperPtr } from "../../utils/loaders/setObjectURLMapper";
import { Reactive } from "@lincode/reactivity";
import { debounce } from "@lincode/utils";
const mapNames = ["map", "alphaMap"];
const textureRepeatMap = new Map();
const applyTextureRepeat = debounce(function () {
    for (const [item, repeat] of textureRepeatMap) {
        for (const name of mapNames) {
            const map = item.material[name];
            map && (map.repeat = repeat);
        }
    }
    textureRepeatMap.clear();
}, 0, "trailing");
export default class TexturedBasicMixin {
    get color() {
        return "#" + this.material.color.getHexString();
    }
    set color(val) {
        this.material.color = new Color(val);
    }
    get fog() {
        return this.material.fog;
    }
    set fog(val) {
        this.material.fog = val;
    }
    _opacity;
    get opacity() {
        return this._opacity ??= 1.0;
    }
    set opacity(val) {
        this._opacity = val;
        this.material.opacity = val;
        this.material.transparent = this.transparent ?? val < 1;
        //@ts-ignore
        this.object3d.visible = !!val;
    }
    basicTextureRepeat() {
        this.material.needsUpdate = true;
        if (!this._textureRepeat)
            return;
        textureRepeatMap.set(this, this._textureRepeat);
        applyTextureRepeat();
    }
    videoTextureState;
    textureState;
    initTexture() {
        if (this.textureState)
            return;
        const videoTextureState = this.videoTextureState ??= new Reactive(undefined);
        const textureState = this.textureState ??= new Reactive(undefined);
        //@ts-ignore
        this.createEffect(() => {
            const url = textureState.get();
            let videoURL = videoTextureState.get();
            if (!videoURL && ((typeof url === "string" && objectURLMapperPtr[0](url).toLowerCase().endsWith(".mp4")) ||
                (url && url instanceof HTMLVideoElement))) {
                videoURL = url;
            }
            if (videoURL) {
                let video;
                if (videoURL instanceof HTMLVideoElement)
                    video = videoURL;
                else {
                    video = document.createElement("video");
                    video.crossOrigin = "anonymous";
                    video.src = videoURL;
                    video.loop = true;
                    video.autoplay = true;
                    video.muted = true;
                    video.playsInline = true;
                    video.play();
                }
                const videoTexture = new VideoTexture(video);
                videoTexture.wrapS = videoTexture.wrapT = RepeatWrapping;
                const { material } = this;
                const { map } = material;
                material.map = videoTexture;
                material.needsUpdate = true;
                this.basicTextureRepeat();
                return () => {
                    video.pause();
                    videoTexture.dispose();
                    material.map = map;
                    material.needsUpdate = true;
                };
            }
            if (!url)
                return;
            const { material } = this;
            const { map } = material;
            material.map = loadTexture(url);
            this.basicTextureRepeat();
            return () => {
                material.map = map;
                this.material.needsUpdate = true;
            };
        }, [videoTextureState.get, textureState.get]);
    }
    get videoTexture() {
        return this.videoTextureState?.get();
    }
    set videoTexture(url) {
        this.initTexture();
        this.videoTextureState.set(url);
    }
    get texture() {
        return this.textureState?.get();
    }
    set texture(url) {
        this.initTexture();
        this.textureState.set(url);
    }
    _alphaMap;
    get alphaMap() {
        return this._alphaMap;
    }
    set alphaMap(val) {
        this._alphaMap = val;
        this.material.alphaMap = val ? loadTexture(val) : null;
        this.basicTextureRepeat();
    }
    _textureRepeat;
    get textureRepeat() {
        return this._textureRepeat;
    }
    set textureRepeat(val) {
        typeof val === "number" && (val = new Vector2(val, val));
        this._textureRepeat = val;
        this.basicTextureRepeat();
    }
}
//# sourceMappingURL=TexturedBasicMixin.js.map