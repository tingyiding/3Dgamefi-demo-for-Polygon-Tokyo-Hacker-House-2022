import { Group, PropertyBinding } from "three";
import { deg2Rad, rad2Deg } from "@lincode/math";
import scene from "../../engine/scene";
import SimpleObjectManager from "./SimpleObjectManager";
import { scaleDown, scaleUp } from "../../engine/constants";
import FoundManager from "./FoundManager";
export default class ObjectManager extends SimpleObjectManager {
    constructor(object3d) {
        super(object3d);
        const group = this.outerObject3d = new Group();
        group.userData.manager = this;
        scene.add(group);
        group.add(object3d);
    }
    get innerRotationX() {
        return this.object3d.rotation.x * rad2Deg;
    }
    set innerRotationX(val) {
        this.object3d.rotation.x = val * deg2Rad;
    }
    get innerRotationY() {
        return this.object3d.rotation.y * rad2Deg;
    }
    set innerRotationY(val) {
        this.object3d.rotation.y = val * deg2Rad;
    }
    get innerRotationZ() {
        return this.object3d.rotation.z * rad2Deg;
    }
    set innerRotationZ(val) {
        this.object3d.rotation.z = val * deg2Rad;
    }
    get innerRotation() {
        return this.innerRotationZ;
    }
    set innerRotation(val) {
        this.innerRotationZ = val;
    }
    get innerX() {
        return this.object3d.position.x * scaleUp;
    }
    set innerX(val) {
        this.object3d.position.x = val * scaleDown;
    }
    get innerY() {
        return this.object3d.position.y * scaleUp;
    }
    set innerY(val) {
        this.object3d.position.y = val * scaleDown;
    }
    get innerZ() {
        return this.object3d.position.z * scaleUp;
    }
    set innerZ(val) {
        this.object3d.position.z = val * scaleDown;
    }
    find(name, hiddenFromSceneGraph) {
        const child = this.outerObject3d.getObjectByName(PropertyBinding.sanitizeNodeName(name));
        if (!child)
            return;
        const result = child.userData.manager ??= new FoundManager(child);
        !hiddenFromSceneGraph && this._append(result);
        return result;
    }
    findAll(name) {
        const result = [];
        this.outerObject3d.traverse(child => {
            child.name === name && result.push(child.userData.manager ??= new FoundManager(child));
        });
        return result;
    }
}
//# sourceMappingURL=ObjectManager.js.map