import { Group } from "three";
import Loaded from "./core/Loaded";
import AnimationManager from "./core/mixins/AnimationMixin/AnimationManager";
import IModel from "../interface/IModel";
import FoundManager from "./core/FoundManager";
export default class Model extends Loaded<Group> implements IModel {
    static componentName: string;
    static defaults: import("../interface/utils/Defaults").default<IModel>;
    static schema: Required<import("../interface/utils/extractProps").ExtractProps<IModel>>;
    protected loadedAnims?: Record<string, string>;
    loadAnimation(url: string, name?: string): Promise<void>;
    get animations(): Record<string, AnimationManager>;
    set animations(val: Record<string, string | AnimationManager>);
    protected load(url: string): Promise<Group>;
    private _loadedScale?;
    get loadedScale(): number | undefined;
    set loadedScale(val: number | undefined);
    private _loadedPos?;
    private _loadedX?;
    get loadedX(): number | undefined;
    set loadedX(val: number | undefined);
    private _loadedY?;
    get loadedY(): number | undefined;
    set loadedY(val: number | undefined);
    private _loadedZ?;
    get loadedZ(): number | undefined;
    set loadedZ(val: number | undefined);
    protected resolveLoaded(loadedObject3d: Group): Group;
    find(name: string, hiddenFromSceneGraph?: boolean): FoundManager | undefined;
    findAll(name: string): Array<FoundManager>;
}
