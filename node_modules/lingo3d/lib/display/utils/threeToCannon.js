import Model from "../Model";
//@ts-ignore
import fairySrc from "../../../assets-local/fairy.glb";
import { Mesh } from "three";
import { wireframeMaterial } from "./reusables";
import scene from "../../engine/scene";
//@ts-ignore
import { threeToCannon, ShapeType } from "three-to-cannon";
import Sphere from "../primitives/Sphere";
import { timer } from "../../engine/eventLoop";
export default async () => {
    const model = new Model();
    model.src = fairySrc;
    model.scale = 10;
    model.onLoad = () => {
        const geometries = [];
        model.outerObject3d.updateMatrixWorld(true);
        model.outerObject3d.traverse((c) => {
            if (!c.geometry || c === model.object3d)
                return;
            const cloned = c.geometry.clone();
            cloned.applyMatrix4(c.matrixWorld);
            for (const key in cloned.attributes)
                key !== "position" && cloned.deleteAttribute(key);
            geometries.push(cloned);
        });
        // const mergedGeometry = BufferGeometryUtils.mergeBufferGeometries(geometries, false)
        // const collider = new Mesh(mergedGeometry, wireframeMaterial)
        // scene.add(collider)
        const trimeshShape = async function () {
            for (const geom of geometries) {
                const mesh = new Mesh(geom, wireframeMaterial);
                const result = threeToCannon(mesh, { type: ShapeType.MESH });
                this.cannonBody.addShape(result.shape);
                scene.add(mesh);
            }
        };
        model.physicsShape = trimeshShape;
        model.physics = true;
        model.mass = 0;
        timer(1000, -1, () => {
            const ball = new Sphere();
            ball.scale = 0.1;
            ball.y = 100;
            ball.physics = true;
        });
    };
};
//# sourceMappingURL=threeToCannon.js.map