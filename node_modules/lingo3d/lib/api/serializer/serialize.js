import { omit } from "@lincode/utils";
import Appendable, { appendableRoot, hiddenAppendables } from "../core/Appendable";
import settings from "../settings";
import { setupDefaults } from "../../interface/ISetup";
import { nonSerializedProperties, nonSerializedSettings } from "./types";
const serialize = (children) => {
    const dataParent = [];
    for (const child of children) {
        if (hiddenAppendables.has(child))
            continue;
        const { componentName, schema, defaults } = child.constructor;
        const data = { type: componentName };
        for (const key of Object.keys(schema)) {
            if (nonSerializedProperties.includes(key))
                continue;
            let value;
            if (key === "animations") {
                value = child.loadedAnims;
                if (!value)
                    continue;
            }
            else if (key === "animation") {
                value = child.animationName;
                if (value === undefined)
                    continue;
            }
            else
                value = child[key];
            if (value === defaults[key] || typeof value === "function")
                continue;
            if (typeof value === "number")
                value = Number(value.toFixed(2));
            data[key] = value;
        }
        child.children && (data.children = serialize(child.children));
        dataParent.push(data);
    }
    return dataParent;
};
export default (children = appendableRoot) => {
    const data = serialize(children instanceof Appendable ? [children] : children);
    const settingsDiff = { type: "setup" };
    for (const [key, value] of Object.entries(omit(settings, nonSerializedSettings)))
        //@ts-ignore
        if (setupDefaults[key] !== value)
            //@ts-ignore
            settingsDiff[key] = value;
    if (Object.keys(settingsDiff).length)
        data.push(settingsDiff);
    return data;
};
//# sourceMappingURL=serialize.js.map