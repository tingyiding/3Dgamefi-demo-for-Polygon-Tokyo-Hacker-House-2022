import { omit } from "@lincode/utils";
import createObject from "./createObject";
import { nonSerializedProperties } from "./types";
import applySetup from "./applySetup";
import Loaded from "../../display/core/Loaded";
const nodeToObjectManager = (node, loadedResolvables) => {
    if (node.type === "setup") {
        applySetup(node);
        return;
    }
    if (node.type === "animation")
        return;
    const object = createObject(node.type);
    loadedResolvables && object instanceof Loaded && loadedResolvables.push(object.loaded);
    Object.assign(object, omit(node, nonSerializedProperties));
    node.children?.map(n => nodeToObjectManager(n, loadedResolvables)).forEach(c => c && object.append(c));
    return object;
};
export default (graph, loadedResolvables) => (graph.map(n => nodeToObjectManager(n, loadedResolvables)));
//# sourceMappingURL=deserialize.js.map