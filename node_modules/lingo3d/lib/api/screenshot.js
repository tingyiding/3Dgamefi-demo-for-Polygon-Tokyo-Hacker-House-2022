import { onAfterRender } from "../events/onAfterRender";
import { getRenderer } from "../states/useRenderer";
export default {
    toBlob: async () => {
        return new Promise(resolve => {
            const handle = onAfterRender(() => {
                handle.cancel();
                getRenderer()?.domElement.toBlob(blob => blob && resolve(blob));
            });
        });
    },
    toDataURL: async (type, quality) => {
        return new Promise(resolve => {
            const handle = onAfterRender(() => {
                handle.cancel();
                const renderer = getRenderer();
                renderer && resolve(renderer.domElement.toDataURL(type, quality));
            });
        });
    }
};
//# sourceMappingURL=screenshot.js.map