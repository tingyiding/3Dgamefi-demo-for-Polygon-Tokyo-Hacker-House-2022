import { Value } from './value';
import { ValueMap, ValueMapEvents } from './value-map';
export declare type ViewPropsObject = {
    disabled: boolean;
    disposed: boolean;
    hidden: boolean;
};
export declare type ViewPropsEvents = ValueMapEvents<ViewPropsObject>;
interface Disableable {
    disabled: boolean;
}
export declare class ViewProps extends ValueMap<ViewPropsObject> {
    constructor(valueMap: {
        [Key in keyof ViewPropsObject]: Value<ViewPropsObject[Key]>;
    });
    static create(opt_initialValue?: Partial<ViewPropsObject>): ViewProps;
    bindClassModifiers(elem: HTMLElement): void;
    bindDisabled(target: Disableable): void;
    bindTabIndex(elem: HTMLOrSVGElement): void;
    handleDispose(callback: () => void): void;
}
export {};
