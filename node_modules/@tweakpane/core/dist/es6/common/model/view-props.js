import { ClassName } from '../view/class-name';
import { valueToClassName } from '../view/reactive';
import { bindValueMap } from './reactive';
import { ValueMap } from './value-map';
const className = ClassName('');
function valueToModifier(elem, modifier) {
    return valueToClassName(elem, className(undefined, modifier));
}
export class ViewProps extends ValueMap {
    constructor(valueMap) {
        super(valueMap);
    }
    static create(opt_initialValue) {
        var _a, _b;
        const initialValue = opt_initialValue !== null && opt_initialValue !== void 0 ? opt_initialValue : {};
        const coreObj = {
            disabled: (_a = initialValue.disabled) !== null && _a !== void 0 ? _a : false,
            disposed: false,
            hidden: (_b = initialValue.hidden) !== null && _b !== void 0 ? _b : false,
        };
        const core = ValueMap.createCore(coreObj);
        return new ViewProps(core);
    }
    bindClassModifiers(elem) {
        bindValueMap(this, 'disabled', valueToModifier(elem, 'disabled'));
        bindValueMap(this, 'hidden', valueToModifier(elem, 'hidden'));
    }
    bindDisabled(target) {
        bindValueMap(this, 'disabled', (disabled) => {
            target.disabled = disabled;
        });
    }
    bindTabIndex(elem) {
        bindValueMap(this, 'disabled', (disabled) => {
            elem.tabIndex = disabled ? -1 : 0;
        });
    }
    handleDispose(callback) {
        this.value('disposed').emitter.on('change', (disposed) => {
            if (disposed) {
                callback();
            }
        });
    }
}
