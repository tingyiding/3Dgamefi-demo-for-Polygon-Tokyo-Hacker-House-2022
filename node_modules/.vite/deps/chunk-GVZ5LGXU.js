// node_modules/three/examples/jsm/utils/SkeletonUtils.js
function clone(source) {
  const sourceLookup = /* @__PURE__ */ new Map();
  const cloneLookup = /* @__PURE__ */ new Map();
  const clone2 = source.clone();
  parallelTraverse(source, clone2, function(sourceNode, clonedNode) {
    sourceLookup.set(clonedNode, sourceNode);
    cloneLookup.set(sourceNode, clonedNode);
  });
  clone2.traverse(function(node) {
    if (!node.isSkinnedMesh)
      return;
    const clonedMesh = node;
    const sourceMesh = sourceLookup.get(node);
    const sourceBones = sourceMesh.skeleton.bones;
    clonedMesh.skeleton = sourceMesh.skeleton.clone();
    clonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);
    clonedMesh.skeleton.bones = sourceBones.map(function(bone) {
      return cloneLookup.get(bone);
    });
    clonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);
  });
  return clone2;
}
function parallelTraverse(a, b, callback) {
  callback(a, b);
  for (let i = 0; i < a.children.length; i++) {
    parallelTraverse(a.children[i], b.children[i], callback);
  }
}

// node_modules/lingo3d/lib/display/utils/cloneSkinnedMesh.js
var skinnedMeshSet = /* @__PURE__ */ new WeakSet();
var cloneSkinnedMesh_default = (target, noBone, animations = target.animations) => {
  const clone2 = noBone ? target.clone() : clone(target);
  !noBone && skinnedMeshSet.add(clone2);
  clone2.animations = animations;
  return clone2;
};

export {
  skinnedMeshSet,
  cloneSkinnedMesh_default
};
//# sourceMappingURL=chunk-GVZ5LGXU.js.map
