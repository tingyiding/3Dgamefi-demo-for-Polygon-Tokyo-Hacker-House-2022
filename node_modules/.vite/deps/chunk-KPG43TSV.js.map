{
  "version": 3,
  "sources": ["../../@lincode/math/lib/index.js", "../../lingo3d/src/display/utils/vec2Point.ts", "../../lingo3d/src/api/core/PositionedItem.ts", "../../lingo3d/src/states/useSelectionLocked.ts", "../../lingo3d/src/states/useSelectionTarget.ts", "../../lingo3d/src/states/useMultipleSelection.ts", "../../lingo3d/src/states/useMultipleSelectionTargets.ts", "../../lingo3d/src/events/onSelectionTarget.ts", "../../lingo3d/src/states/useTransformControlsDragging.ts", "../../lingo3d/src/events/onSelectionRecompute.ts", "../../lingo3d/src/states/useSelectionFrozen.ts", "../../lingo3d/src/display/core/StaticObjectManager/raycast.ts", "../../three/examples/jsm/math/OBB.js", "../../three/examples/jsm/shaders/CopyShader.js", "../../three/examples/jsm/postprocessing/Pass.js", "../../three/examples/jsm/postprocessing/ShaderPass.js", "../../three/examples/jsm/postprocessing/MaskPass.js", "../../three/examples/jsm/postprocessing/EffectComposer.js", "../../lingo3d/src/states/useSelectiveBloomComposer.ts", "../../lingo3d/src/engine/renderLoop/effectComposer/selectiveBloomPass/renderSelectiveBloom.ts", "../../lingo3d/src/display/utils/getCenter.ts", "../../lingo3d/src/display/utils/worldToClient.ts", "../../three/examples/jsm/shaders/SSRShader.js", "../../three/examples/jsm/postprocessing/SSRPass.js", "../../lingo3d/src/engine/renderLoop/effectComposer/ssrPass.ts", "../../three/examples/jsm/postprocessing/OutlinePass.js", "../../lingo3d/src/states/useOutlineColor.ts", "../../lingo3d/src/states/useOutlineHiddenColor.ts", "../../lingo3d/src/states/useOutlinePattern.ts", "../../lingo3d/src/states/useOutlinePulse.ts", "../../lingo3d/src/states/useOutlineStrength.ts", "../../lingo3d/src/states/useOutlineThickness.ts", "../../lingo3d/src/engine/renderLoop/effectComposer/outlinePass.ts", "../../lingo3d/src/display/core/mixins/AnimationMixin/AnimationManager.ts", "../../lingo3d/src/display/core/mixins/AnimationMixin/index.ts", "../../lingo3d/src/display/core/StaticObjectManager/applyMaterialProperties/copyMaterial.ts", "../../lingo3d/src/display/core/StaticObjectManager/applyMaterialProperties/copyStandard.ts", "../../lingo3d/src/display/core/StaticObjectManager/applyMaterialProperties/copyToon.ts", "../../lingo3d/src/display/utils/diffQuaternions.ts", "../../lingo3d/src/display/core/StaticObjectManager/index.tsx", "../../lingo3d/src/display/core/MeshItem.ts", "../../lingo3d/src/display/utils/getActualScale.ts", "../../lingo3d/src/display/core/mixins/PhysicsMixin/cannon/shapes/cubeShape.ts", "../../lingo3d/src/display/core/mixins/PhysicsMixin/bvh/bvhContactMap.ts", "../../lingo3d/src/display/core/mixins/PhysicsMixin/index.ts", "../../lingo3d/src/display/core/SimpleObjectManager/index.ts", "../../lingo3d/src/interface/IAnimationMixin.ts", "../../lingo3d/src/interface/IStaticObjectManaget.ts", "../../lingo3d/src/interface/ITexturedBasic.ts", "../../lingo3d/src/interface/ITexturedStandard.ts", "../../lingo3d/src/interface/IFound.ts", "../../lingo3d/src/display/utils/loaders/setObjectURLMapper.ts", "../../lingo3d/src/display/core/mixins/TexturedBasicMixin.ts", "../../lingo3d/src/display/core/mixins/TexturedStandardMixin.ts", "../../lingo3d/src/display/core/FoundManager.ts", "../../lingo3d/src/display/core/ObjectManager.ts", "../../lingo3d/src/interface/IPhysics.ts", "../../lingo3d/src/interface/IPositioned.ts", "../../lingo3d/src/interface/ISimpleObjectManager.ts", "../../lingo3d/src/interface/IObjectManager.ts", "../../lingo3d/src/interface/IPrimitive.ts", "../../lingo3d/src/display/core/Primitive.ts"],
  "sourcesContent": ["export class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\nexport class Point3d {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\nexport class Size {\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n}\nexport class Intersect {\n    constructor(type, point) {\n        this.type = type;\n        this.point = point;\n    }\n}\nexport const rad2Deg = 180 / Math.PI;\nexport const deg2Rad = Math.PI / 180;\nexport const mapRange = (value, minFrom, maxFrom, minTo, maxTo, constrain) => {\n    const rangeFrom = maxFrom - minFrom;\n    const rangeTo = maxTo - minTo;\n    const result = minTo + ((value - minFrom) / rangeFrom * rangeTo);\n    if (!constrain)\n        return result;\n    let minVal;\n    let maxVal;\n    if (minTo < maxTo) {\n        minVal = minTo;\n        maxVal = maxTo;\n    }\n    else {\n        minVal = maxTo;\n        maxVal = minTo;\n    }\n    if (result < minVal)\n        return minVal;\n    if (result > maxVal)\n        return maxVal;\n    return result;\n};\nexport const rangeOverlap = (min0, max0, min1, max1) => {\n    return Math.max(Math.min(max0, max1) - Math.max(min0, min1), 0);\n};\nexport const distance = (x0, y0, x1, y1) => {\n    return Math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2);\n};\nexport const distance3d = (x0, y0, z0, x1, y1, z1) => {\n    return Math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2 + (z0 - z1) ** 2);\n};\nexport const geoDistance = (lng0, lat0, lng1, lat1) => {\n    const dLat = (lat1 - lat0) * deg2Rad;\n    const dLng = (lng1 - lng0) * deg2Rad;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(lat0 * deg2Rad) * Math.cos(lat1 * deg2Rad) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    return 6371 * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n};\nexport const vertexAngle = (vertex, pt1, pt2, reflex) => {\n    const p01 = distance(vertex.x, vertex.y, pt1.x, pt1.y);\n    const p02 = distance(vertex.x, vertex.y, pt2.x, pt2.y);\n    const p12 = distance(pt1.x, pt1.y, pt2.x, pt2.y);\n    const angle = Math.acos(((p01 * p01) + (p02 * p02) - (p12 * p12)) / (2 * p01 * p02)) * rad2Deg;\n    return reflex ? 360 - angle : angle;\n};\nexport const vertexAngle3d = (vertex, pt1, pt2, reflex) => {\n    const p01 = distance3d(vertex.x, vertex.y, vertex.z, pt1.x, pt1.y, pt1.z);\n    const p02 = distance3d(vertex.x, vertex.y, vertex.z, pt2.x, pt2.y, pt2.z);\n    const p12 = distance3d(pt1.x, pt1.y, pt1.z, pt2.x, pt2.y, pt2.z);\n    const angle = Math.acos(((p01 * p01) + (p02 * p02) - (p12 * p12)) / (2 * p01 * p02)) * rad2Deg;\n    return reflex ? 360 - angle : angle;\n};\nexport const quaternion2Euler = (x, y, z, w) => {\n    const sinr_cosp = 2 * (w * x + y * z);\n    const cosr_cosp = 1 - 2 * (x * x + y * y);\n    const roll = Math.atan2(sinr_cosp, cosr_cosp);\n    const sinp = 2 * (w * y - z * x);\n    const pitch = Math.abs(sinp) >= 1\n        ? sinp > 0 ? Math.PI / 2 : -Math.PI / 2\n        : Math.asin(sinp);\n    const siny_cosp = 2 * (w * z + x * y);\n    const cosy_cosp = 1 - 2 * (y * y + z * z);\n    const yaw = Math.atan2(siny_cosp, cosy_cosp);\n    return new Point3d(roll * rad2Deg, pitch * rad2Deg, yaw * rad2Deg);\n};\nexport const polar2Cartesian = (centerX, centerY, radius, angle) => {\n    const theta = (angle - 90) * deg2Rad;\n    return new Point(centerX + (radius * Math.cos(theta)), centerY + (radius * Math.sin(theta)));\n};\nexport const rotatePoint = (pt, origin, theta) => {\n    const rad = theta * deg2Rad;\n    const deltaX = pt.x - origin.x;\n    const deltaY = pt.y - origin.y;\n    const rotatedX = (deltaX * Math.cos(rad)) - (deltaY * Math.sin(rad));\n    const rotatedY = (deltaX * Math.sin(rad)) + (deltaY * Math.cos(rad));\n    return new Point(rotatedX + origin.x, rotatedY + origin.y);\n};\nexport const rotatedBoundingSize = (w, h, theta) => {\n    const rad = theta * deg2Rad;\n    const width = Math.abs(w * Math.cos(rad)) + Math.abs(h * Math.sin(rad));\n    const height = Math.abs(w * Math.sin(rad)) + Math.abs(h * Math.cos(rad));\n    return new Size(width, height);\n};\nexport const midPoint = (x0, y0, x1, y1) => {\n    return new Point((x0 + x1) / 2, (y0 + y1) / 2);\n};\nexport const centroid = (points) => {\n    const res = new Point(0, 0);\n    for (const pt of points) {\n        res.x += pt.x;\n        res.y += pt.y;\n    }\n    res.x /= points.length;\n    res.y /= points.length;\n    return res;\n};\nexport const centroid3d = (points) => {\n    const res = new Point3d(0, 0, 0);\n    for (const pt of points) {\n        res.x += pt.x;\n        res.y += pt.y;\n        res.z += pt.z;\n    }\n    res.x /= points.length;\n    res.y /= points.length;\n    res.z /= points.length;\n    return res;\n};\nexport const wrapRange = (val, min, max) => {\n    max += 1;\n    const valMin = val - min, maxMin = max - min, remainder = valMin % maxMin;\n    if (remainder < 0)\n        return max + remainder;\n    return min + remainder;\n};\nexport const wrapDegree = (val) => {\n    return wrapRange(val, 0, 359);\n};\nexport const wrapRadian = (val) => {\n    return wrapDegree(val * rad2Deg) * deg2Rad;\n};\nexport const intersect = (line0, line1, lineSegment = true) => {\n    const [p00, p01] = line0;\n    const [p10, p11] = line1;\n    const x0 = p00.x, y0 = p00.y, x1 = p01.x, y1 = p01.y;\n    const x2 = p10.x, y2 = p10.y, x3 = p11.x, y3 = p11.y;\n    const denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n    const numeA = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n    const numeB = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n    if (denom === 0) {\n        if (numeA === 0 && numeB === 0)\n            return new Intersect(\"colinear\");\n        else\n            return new Intersect(\"parallel\");\n    }\n    const uA = numeA / denom, uB = numeB / denom;\n    if (!lineSegment || (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1))\n        return new Intersect(\"intersect\", new Point(x0 + (uA * (x1 - x0)), y0 + (uA * (y1 - y0))));\n    return new Intersect(\"none\");\n};\nexport const normalIntersect = (line, pt) => {\n    const [p0, p1] = line;\n    const x0 = p0.x, y0 = p0.y, x1 = p1.x, y1 = p1.y, x = pt.x, y = pt.y;\n    const k = ((y1 - y0) * (x - x0) - (x1 - x0) * (y - y0)) / ((y1 - y0) ** 2 + (x1 - x0) ** 2);\n    return new Point(x - k * (y1 - y0), y + k * (x1 - x0));\n};\nexport const quadrant = (x, y, originX, originY) => {\n    if (x >= originX && y <= originY)\n        return 1;\n    if (x <= originX && y <= originY)\n        return 2;\n    if (x <= originX && y >= originY)\n        return 3;\n    return 4;\n};\nexport const endPoint = (x, y, theta, dist) => {\n    const rad = theta *= deg2Rad;\n    return new Point(x + dist * Math.cos(rad), y + dist * Math.sin(rad));\n};\nexport const polygonArea = (xList, yList) => {\n    const n = xList.length;\n    let area = 0;\n    let j = n - 1;\n    for (let i = 0; i < n; i++) {\n        area += (xList[j] + xList[i]) * (yList[j] - yList[i]);\n        j = i;\n    }\n    return Math.abs(area / 2.0);\n};\nexport class UnitBezier {\n    constructor(p1x, p1y, p2x, p2y) {\n        this.epsilon = 1e-6;\n        this.cx = 3.0 * p1x, this.bx = 3.0 * (p2x - p1x) - this.cx, this.ax = 1.0 - this.cx - this.bx;\n        this.cy = 3.0 * p1y, this.by = 3.0 * (p2y - p1y) - this.cy, this.ay = 1.0 - this.cy - this.by;\n    }\n    sampleCurveX(t) {\n        return ((this.ax * t + this.bx) * t + this.cx) * t;\n    }\n    sampleCurveY(t) {\n        return ((this.ay * t + this.by) * t + this.cy) * t;\n    }\n    sampleCurveDerivativeX(t) {\n        return (3.0 * this.ax * t + 2.0 * this.bx) * t + this.cx;\n    }\n    solveCurveX(x) {\n        let t0, t1, t2, x2, d2, i;\n        for (t2 = x, i = 0; i < 8; ++i) {\n            x2 = this.sampleCurveX(t2) - x;\n            if (Math.abs(x2) < this.epsilon)\n                return t2;\n            d2 = this.sampleCurveDerivativeX(t2);\n            if (Math.abs(d2) < this.epsilon)\n                break;\n            t2 = t2 - x2 / d2;\n        }\n        t0 = 0.0, t1 = 1.0, t2 = x;\n        if (t2 < t0)\n            return t0;\n        else if (t2 > t1)\n            return t1;\n        while (t0 < t1) {\n            x2 = this.sampleCurveX(t2);\n            if (Math.abs(x2 - x) < this.epsilon)\n                return t2;\n            if (x > x2)\n                t0 = t2;\n            else\n                t1 = t2;\n            t2 = (t1 - t0) * 0.5 + t0;\n        }\n        return t2;\n    }\n    solve(x) {\n        return this.sampleCurveY(this.solveCurveX(x));\n    }\n}\nexport class PerspectiveTransform {\n    constructor() {\n        this.srcX = [];\n        this.srcY = [];\n        this.dstX = [];\n        this.dstY = [];\n        this.srcMat = [];\n        this.dstMat = [];\n        this.warpMat = [];\n        this.dirty = false;\n    }\n    setSource(x0, y0, x1, y1, x2, y2, x3, y3) {\n        this.srcX[0] = x0, this.srcY[0] = y0, this.srcX[1] = x1, this.srcY[1] = y1;\n        this.srcX[2] = x2, this.srcY[2] = y2, this.srcX[3] = x3, this.srcY[3] = y3;\n        this.dirty = true;\n    }\n    setDestination(x0, y0, x1, y1, x2, y2, x3, y3) {\n        this.dstX[0] = x0, this.dstY[0] = y0, this.dstX[1] = x1, this.dstY[1] = y1;\n        this.dstX[2] = x2, this.dstY[2] = y2, this.dstX[3] = x3, this.dstY[3] = y3;\n        this.dirty = true;\n    }\n    computeSquareToQuad(x0, y0, x1, y1, x2, y2, x3, y3, mat) {\n        const dx1 = x1 - x2, dy1 = y1 - y2;\n        const dx2 = x3 - x2, dy2 = y3 - y2;\n        const sx = x0 - x1 + x2 - x3, sy = y0 - y1 + y2 - y3;\n        const g = (sx * dy2 - dx2 * sy) / (dx1 * dy2 - dx2 * dy1);\n        const h = (dx1 * sy - sx * dy1) / (dx1 * dy2 - dx2 * dy1);\n        const a = x1 - x0 + g * x1, b = x3 - x0 + h * x3;\n        const c = x0, d = y1 - y0 + g * y1, e = y3 - y0 + h * y3, f = y0;\n        mat[0] = a, mat[1] = d, mat[2] = 0, mat[3] = g;\n        mat[4] = b, mat[5] = e, mat[6] = 0, mat[7] = h;\n        mat[8] = 0, mat[9] = 0, mat[10] = 1, mat[11] = 0;\n        mat[12] = c, mat[13] = f, mat[14] = 0, mat[15] = 1;\n    }\n    computeQuadToSquare(x0, y0, x1, y1, x2, y2, x3, y3, mat) {\n        this.computeSquareToQuad(x0, y0, x1, y1, x2, y2, x3, y3, mat);\n        const a = mat[0], d = mat[1], g = mat[3], b = mat[4];\n        const e = mat[5], h = mat[7], c = mat[12], f = mat[13];\n        const A = e - f * h, B = c * h - b, C = b * f - c * e;\n        const D = f * g - d, E = a - c * g, F = c * d - a * f;\n        const G = d * h - e * g, H = b * g - a * h, I = a * e - b * d;\n        const id = 1 / (a * A + b * D + c * G);\n        mat[0] = A * id, mat[1] = D * id, mat[2] = 0, mat[3] = G * id;\n        mat[4] = B * id, mat[5] = E * id, mat[6] = 0, mat[7] = H * id;\n        mat[8] = 0, mat[9] = 0, mat[10] = 1, mat[11] = 0;\n        mat[12] = C * id, mat[13] = F * id, mat[14] = 0, mat[15] = I * id;\n    }\n    multMats(srcMat, dstMat, resMat) {\n        for (let r = 0; r < 4; ++r) {\n            const ri = r * 4;\n            for (let c = 0; c < 4; ++c)\n                resMat[ri + c] = srcMat[ri] * dstMat[c] +\n                    srcMat[ri + 1] * dstMat[c + 4] +\n                    srcMat[ri + 2] * dstMat[c + 8] +\n                    srcMat[ri + 3] * dstMat[c + 12];\n        }\n    }\n    computeWarp() {\n        this.computeQuadToSquare(this.srcX[0], this.srcY[0], this.srcX[1], this.srcY[1], this.srcX[2], this.srcY[2], this.srcX[3], this.srcY[3], this.srcMat);\n        this.computeSquareToQuad(this.dstX[0], this.dstY[0], this.dstX[1], this.dstY[1], this.dstX[2], this.dstY[2], this.dstX[3], this.dstY[3], this.dstMat);\n        this.multMats(this.srcMat, this.dstMat, this.warpMat);\n        this.dirty = false;\n    }\n    warp(mat, srcX, srcY) {\n        const result = [], z = 0;\n        result[0] = srcX * mat[0] + srcY * mat[4] + z * mat[8] + mat[12];\n        result[1] = srcX * mat[1] + srcY * mat[5] + z * mat[9] + mat[13];\n        result[2] = srcX * mat[2] + srcY * mat[6] + z * mat[10] + mat[14];\n        result[3] = srcX * mat[3] + srcY * mat[7] + z * mat[11] + mat[15];\n        return new Point(result[0] / result[3], result[1] / result[3]);\n    }\n    solve(srcX, srcY) {\n        if (this.dirty)\n            this.computeWarp();\n        return this.warp(this.warpMat, srcX, srcY);\n    }\n}\nexport class LowPassFilter {\n    constructor(alpha = 0.5, maxDelta = Infinity) {\n        this.alpha = alpha;\n        this.maxDelta = maxDelta;\n    }\n    next(n, alpha = this.alpha, maxDelta = this.maxDelta) {\n        if (this.nOld == null)\n            this.nOld = n;\n        let delta = (n - this.nOld) * alpha;\n        if (Math.abs(delta) > maxDelta)\n            delta = maxDelta * (delta < 0 ? -1 : 1);\n        let result = this.nOld + delta;\n        if (result < 0.00001 && result > -0.00001)\n            result = 0;\n        return this.nOld = result;\n    }\n}\n", null, null, null, null, null, null, null, null, null, null, null, "import {\n\tBox3,\n\tMathUtils,\n\tMatrix4,\n\tMatrix3,\n\tRay,\n\tVector3\n} from 'three';\n\n// module scope helper variables\n\nconst a = {\n\tc: null, // center\n\tu: [ new Vector3(), new Vector3(), new Vector3() ], // basis vectors\n\te: [] // half width\n};\n\nconst b = {\n\tc: null, // center\n\tu: [ new Vector3(), new Vector3(), new Vector3() ], // basis vectors\n\te: [] // half width\n};\n\nconst R = [[], [], []];\nconst AbsR = [[], [], []];\nconst t = [];\n\nconst xAxis = new Vector3();\nconst yAxis = new Vector3();\nconst zAxis = new Vector3();\nconst v1 = new Vector3();\nconst size = new Vector3();\nconst closestPoint = new Vector3();\nconst rotationMatrix = new Matrix3();\nconst aabb = new Box3();\nconst matrix = new Matrix4();\nconst inverse = new Matrix4();\nconst localRay = new Ray();\n\n// OBB\n\nclass OBB {\n\n\tconstructor( center = new Vector3(), halfSize = new Vector3(), rotation = new Matrix3() ) {\n\n\t\tthis.center = center;\n\t\tthis.halfSize = halfSize;\n\t\tthis.rotation = rotation;\n\n\t}\n\n\tset( center, halfSize, rotation ) {\n\n\t\tthis.center = center;\n\t\tthis.halfSize = halfSize;\n\t\tthis.rotation = rotation;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( obb ) {\n\n\t\tthis.center.copy( obb.center );\n\t\tthis.halfSize.copy( obb.halfSize );\n\t\tthis.rotation.copy( obb.rotation );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tgetSize( result ) {\n\n\t\treturn result.copy( this.halfSize ).multiplyScalar( 2 );\n\n\t}\n\n\t/**\n\t* Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n\t* by Christer Ericson (chapter 5.1.4)\n\t*/\n\tclampPoint( point, result ) {\n\n\t\tconst halfSize = this.halfSize;\n\n\t\tv1.subVectors( point, this.center );\n\t\tthis.rotation.extractBasis( xAxis, yAxis, zAxis );\n\n\t\t// start at the center position of the OBB\n\n\t\tresult.copy( this.center );\n\n\t\t// project the target onto the OBB axes and walk towards that point\n\n\t\tconst x = MathUtils.clamp( v1.dot( xAxis ), - halfSize.x, halfSize.x );\n\t\tresult.add( xAxis.multiplyScalar( x ) );\n\n\t\tconst y = MathUtils.clamp( v1.dot( yAxis ), - halfSize.y, halfSize.y );\n\t\tresult.add( yAxis.multiplyScalar( y ) );\n\n\t\tconst z = MathUtils.clamp( v1.dot( zAxis ), - halfSize.z, halfSize.z );\n\t\tresult.add( zAxis.multiplyScalar( z ) );\n\n\t\treturn result;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tv1.subVectors( point, this.center );\n\t\tthis.rotation.extractBasis( xAxis, yAxis, zAxis );\n\n\t\t// project v1 onto each axis and check if these points lie inside the OBB\n\n\t\treturn Math.abs( v1.dot( xAxis ) ) <= this.halfSize.x &&\n\t\t\t\tMath.abs( v1.dot( yAxis ) ) <= this.halfSize.y &&\n\t\t\t\tMath.abs( v1.dot( zAxis ) ) <= this.halfSize.z;\n\n\t}\n\n\tintersectsBox3( box3 ) {\n\n\t\treturn this.intersectsOBB( obb.fromBox3( box3 ) );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// find the point on the OBB closest to the sphere center\n\n\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t// if that point is inside the sphere, the OBB and sphere intersect\n\n\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\t/**\n\t* Reference: OBB-OBB Intersection in Real-Time Collision Detection\n\t* by Christer Ericson (chapter 4.4.1)\n\t*\n\t*/\n\tintersectsOBB( obb, epsilon = Number.EPSILON ) {\n\n\t\t// prepare data structures (the code uses the same nomenclature like the reference)\n\n\t\ta.c = this.center;\n\t\ta.e[ 0 ] = this.halfSize.x;\n\t\ta.e[ 1 ] = this.halfSize.y;\n\t\ta.e[ 2 ] = this.halfSize.z;\n\t\tthis.rotation.extractBasis( a.u[ 0 ], a.u[ 1 ], a.u[ 2 ] );\n\n\t\tb.c = obb.center;\n\t\tb.e[ 0 ] = obb.halfSize.x;\n\t\tb.e[ 1 ] = obb.halfSize.y;\n\t\tb.e[ 2 ] = obb.halfSize.z;\n\t\tobb.rotation.extractBasis( b.u[ 0 ], b.u[ 1 ], b.u[ 2 ] );\n\n\t\t// compute rotation matrix expressing b in a's coordinate frame\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\tR[ i ][ j ] = a.u[ i ].dot( b.u[ j ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute translation vector\n\n\t\tv1.subVectors( b.c, a.c );\n\n\t\t// bring translation into a's coordinate frame\n\n\t\tt[ 0 ] = v1.dot( a.u[ 0 ] );\n\t\tt[ 1 ] = v1.dot( a.u[ 1 ] );\n\t\tt[ 2 ] = v1.dot( a.u[ 2 ] );\n\n\t\t// compute common subexpressions. Add in an epsilon term to\n\t\t// counteract arithmetic errors when two edges are parallel and\n\t\t// their cross product is (near) null\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\tAbsR[ i ][ j ] = Math.abs( R[ i ][ j ] ) + epsilon;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet ra, rb;\n\n\t\t// test axes L = A0, L = A1, L = A2\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tra = a.e[ i ];\n\t\t\trb = b.e[ 0 ] * AbsR[ i ][ 0 ] + b.e[ 1 ] * AbsR[ i ][ 1 ] + b.e[ 2 ] * AbsR[ i ][ 2 ];\n\t\t\tif ( Math.abs( t[ i ] ) > ra + rb ) return false;\n\n\n\t\t}\n\n\t\t// test axes L = B0, L = B1, L = B2\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tra = a.e[ 0 ] * AbsR[ 0 ][ i ] + a.e[ 1 ] * AbsR[ 1 ][ i ] + a.e[ 2 ] * AbsR[ 2 ][ i ];\n\t\t\trb = b.e[ i ];\n\t\t\tif ( Math.abs( t[ 0 ] * R[ 0 ][ i ] + t[ 1 ] * R[ 1 ][ i ] + t[ 2 ] * R[ 2 ][ i ] ) > ra + rb ) return false;\n\n\t\t}\n\n\t\t// test axis L = A0 x B0\n\n\t\tra = a.e[ 1 ] * AbsR[ 2 ][ 0 ] + a.e[ 2 ] * AbsR[ 1 ][ 0 ];\n\t\trb = b.e[ 1 ] * AbsR[ 0 ][ 2 ] + b.e[ 2 ] * AbsR[ 0 ][ 1 ];\n\t\tif ( Math.abs( t[ 2 ] * R[ 1 ][ 0 ] - t[ 1 ] * R[ 2 ][ 0 ] ) > ra + rb ) return false;\n\n\t\t// test axis L = A0 x B1\n\n\t\tra = a.e[ 1 ] * AbsR[ 2 ][ 1 ] + a.e[ 2 ] * AbsR[ 1 ][ 1 ];\n\t\trb = b.e[ 0 ] * AbsR[ 0 ][ 2 ] + b.e[ 2 ] * AbsR[ 0 ][ 0 ];\n\t\tif ( Math.abs( t[ 2 ] * R[ 1 ][ 1 ] - t[ 1 ] * R[ 2 ][ 1 ] ) > ra + rb ) return false;\n\n\t\t// test axis L = A0 x B2\n\n\t\tra = a.e[ 1 ] * AbsR[ 2 ][ 2 ] + a.e[ 2 ] * AbsR[ 1 ][ 2 ];\n\t\trb = b.e[ 0 ] * AbsR[ 0 ][ 1 ] + b.e[ 1 ] * AbsR[ 0 ][ 0 ];\n\t\tif ( Math.abs( t[ 2 ] * R[ 1 ][ 2 ] - t[ 1 ] * R[ 2 ][ 2 ] ) > ra + rb ) return false;\n\n\t\t// test axis L = A1 x B0\n\n\t\tra = a.e[ 0 ] * AbsR[ 2 ][ 0 ] + a.e[ 2 ] * AbsR[ 0 ][ 0 ];\n\t\trb = b.e[ 1 ] * AbsR[ 1 ][ 2 ] + b.e[ 2 ] * AbsR[ 1 ][ 1 ];\n\t\tif ( Math.abs( t[ 0 ] * R[ 2 ][ 0 ] - t[ 2 ] * R[ 0 ][ 0 ] ) > ra + rb ) return false;\n\n\t\t// test axis L = A1 x B1\n\n\t\tra = a.e[ 0 ] * AbsR[ 2 ][ 1 ] + a.e[ 2 ] * AbsR[ 0 ][ 1 ];\n\t\trb = b.e[ 0 ] * AbsR[ 1 ][ 2 ] + b.e[ 2 ] * AbsR[ 1 ][ 0 ];\n\t\tif ( Math.abs( t[ 0 ] * R[ 2 ][ 1 ] - t[ 2 ] * R[ 0 ][ 1 ] ) > ra + rb ) return false;\n\n\t\t// test axis L = A1 x B2\n\n\t\tra = a.e[ 0 ] * AbsR[ 2 ][ 2 ] + a.e[ 2 ] * AbsR[ 0 ][ 2 ];\n\t\trb = b.e[ 0 ] * AbsR[ 1 ][ 1 ] + b.e[ 1 ] * AbsR[ 1 ][ 0 ];\n\t\tif ( Math.abs( t[ 0 ] * R[ 2 ][ 2 ] - t[ 2 ] * R[ 0 ][ 2 ] ) > ra + rb ) return false;\n\n\t\t// test axis L = A2 x B0\n\n\t\tra = a.e[ 0 ] * AbsR[ 1 ][ 0 ] + a.e[ 1 ] * AbsR[ 0 ][ 0 ];\n\t\trb = b.e[ 1 ] * AbsR[ 2 ][ 2 ] + b.e[ 2 ] * AbsR[ 2 ][ 1 ];\n\t\tif ( Math.abs( t[ 1 ] * R[ 0 ][ 0 ] - t[ 0 ] * R[ 1 ][ 0 ] ) > ra + rb ) return false;\n\n\t\t// test axis L = A2 x B1\n\n\t\tra = a.e[ 0 ] * AbsR[ 1 ][ 1 ] + a.e[ 1 ] * AbsR[ 0 ][ 1 ];\n\t\trb = b.e[ 0 ] * AbsR[ 2 ][ 2 ] + b.e[ 2 ] * AbsR[ 2 ][ 0 ];\n\t\tif ( Math.abs( t[ 1 ] * R[ 0 ][ 1 ] - t[ 0 ] * R[ 1 ][ 1 ] ) > ra + rb ) return false;\n\n\t\t// test axis L = A2 x B2\n\n\t\tra = a.e[ 0 ] * AbsR[ 1 ][ 2 ] + a.e[ 1 ] * AbsR[ 0 ][ 2 ];\n\t\trb = b.e[ 0 ] * AbsR[ 2 ][ 1 ] + b.e[ 1 ] * AbsR[ 2 ][ 0 ];\n\t\tif ( Math.abs( t[ 1 ] * R[ 0 ][ 2 ] - t[ 0 ] * R[ 1 ][ 2 ] ) > ra + rb ) return false;\n\n\t\t// since no separating axis is found, the OBBs must be intersecting\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t* Reference: Testing Box Against Plane in Real-Time Collision Detection\n\t* by Christer Ericson (chapter 5.2.3)\n\t*/\n\tintersectsPlane( plane ) {\n\n\t\tthis.rotation.extractBasis( xAxis, yAxis, zAxis );\n\n\t\t// compute the projection interval radius of this OBB onto L(t) = this->center + t * p.normal;\n\n\t\tconst r = this.halfSize.x * Math.abs( plane.normal.dot( xAxis ) ) +\n\t\t\t\tthis.halfSize.y * Math.abs( plane.normal.dot( yAxis ) ) +\n\t\t\t\tthis.halfSize.z * Math.abs( plane.normal.dot( zAxis ) );\n\n\t\t// compute distance of the OBB's center from the plane\n\n\t\tconst d = plane.normal.dot( this.center ) - plane.constant;\n\n\t\t// Intersection occurs when distance d falls within [-r,+r] interval\n\n\t\treturn Math.abs( d ) <= r;\n\n\t}\n\n\t/**\n\t* Performs a ray/OBB intersection test and stores the intersection point\n\t* to the given 3D vector. If no intersection is detected, *null* is returned.\n\t*/\n\tintersectRay( ray, result ) {\n\n\t\t// the idea is to perform the intersection test in the local space\n\t\t// of the OBB.\n\n\t\tthis.getSize( size );\n\t\taabb.setFromCenterAndSize( v1.set( 0, 0, 0 ), size );\n\n\t\t// create a 4x4 transformation matrix\n\n\t\tmatrix.setFromMatrix3( this.rotation );\n\t\tmatrix.setPosition( this.center );\n\n\t\t// transform ray to the local space of the OBB\n\n\t\tinverse.copy( matrix ).invert();\n\t\tlocalRay.copy( ray ).applyMatrix4( inverse );\n\n\t\t// perform ray <-> AABB intersection test\n\n\t\tif ( localRay.intersectBox( aabb, result ) ) {\n\n\t\t\t// transform the intersection point back to world space\n\n\t\t\treturn result.applyMatrix4( matrix );\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t* Performs a ray/OBB intersection test. Returns either true or false if\n\t* there is a intersection or not.\n\t*/\n\tintersectsRay( ray ) {\n\n\t\treturn this.intersectRay( ray, v1 ) !== null;\n\n\t}\n\n\tfromBox3( box3 ) {\n\n\t\tbox3.getCenter( this.center );\n\n\t\tbox3.getSize( this.halfSize ).multiplyScalar( 0.5 );\n\n\t\tthis.rotation.identity();\n\n\t\treturn this;\n\n\t}\n\n\tequals( obb ) {\n\n\t\treturn obb.center.equals( this.center ) &&\n\t\t\tobb.halfSize.equals( this.halfSize ) &&\n\t\t\tobb.rotation.equals( this.rotation );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst e = matrix.elements;\n\n\t\tlet sx = v1.set( e[ 0 ], e[ 1 ], e[ 2 ] ).length();\n\t\tconst sy = v1.set( e[ 4 ], e[ 5 ], e[ 6 ] ).length();\n\t\tconst sz = v1.set( e[ 8 ], e[ 9 ], e[ 10 ] ).length();\n\n\t\tconst det = matrix.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\trotationMatrix.setFromMatrix4( matrix );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\trotationMatrix.elements[ 0 ] *= invSX;\n\t\trotationMatrix.elements[ 1 ] *= invSX;\n\t\trotationMatrix.elements[ 2 ] *= invSX;\n\n\t\trotationMatrix.elements[ 3 ] *= invSY;\n\t\trotationMatrix.elements[ 4 ] *= invSY;\n\t\trotationMatrix.elements[ 5 ] *= invSY;\n\n\t\trotationMatrix.elements[ 6 ] *= invSZ;\n\t\trotationMatrix.elements[ 7 ] *= invSZ;\n\t\trotationMatrix.elements[ 8 ] *= invSZ;\n\n\t\tthis.rotation.multiply( rotationMatrix );\n\n\t\tthis.halfSize.x *= sx;\n\t\tthis.halfSize.y *= sy;\n\t\tthis.halfSize.z *= sz;\n\n\t\tv1.setFromMatrixPosition( matrix );\n\t\tthis.center.add( v1 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst obb = new OBB();\n\nexport { OBB };\n", "/**\n * Full-screen textured quad shader\n */\n\nconst CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor.a *= opacity;\n\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n", "import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n", "import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n", "import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n", "import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tMesh,\n\tOrthographicCamera,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n", null, null, null, null, "import {\n\tMatrix4,\n\tVector2\n} from 'three';\n/**\n * References:\n * https://lettier.github.io/3d-game-shaders-for-beginners/screen-space-reflection.html\n */\n\nconst SSRShader = {\n\n\tdefines: {\n\t\tMAX_STEP: 0,\n\t\tPERSPECTIVE_CAMERA: true,\n\t\tDISTANCE_ATTENUATION: true,\n\t\tFRESNEL: true,\n\t\tINFINITE_THICK: false,\n\t\tSELECTIVE: false,\n\t},\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'tNormal': { value: null },\n\t\t'tMetalness': { value: null },\n\t\t'tDepth': { value: null },\n\t\t'cameraNear': { value: null },\n\t\t'cameraFar': { value: null },\n\t\t'resolution': { value: new Vector2() },\n\t\t'cameraProjectionMatrix': { value: new Matrix4() },\n\t\t'cameraInverseProjectionMatrix': { value: new Matrix4() },\n\t\t'opacity': { value: .5 },\n\t\t'maxDistance': { value: 180 },\n\t\t'cameraRange': { value: 0 },\n\t\t'thickness': { value: .018 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n\n\tfragmentShader: /* glsl */`\n\t\t// precision highp float;\n\t\tprecision highp sampler2D;\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D tDepth;\n\t\tuniform sampler2D tNormal;\n\t\tuniform sampler2D tMetalness;\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform float cameraRange;\n\t\tuniform vec2 resolution;\n\t\tuniform float opacity;\n\t\tuniform float cameraNear;\n\t\tuniform float cameraFar;\n\t\tuniform float maxDistance;\n\t\tuniform float thickness;\n\t\tuniform mat4 cameraProjectionMatrix;\n\t\tuniform mat4 cameraInverseProjectionMatrix;\n\t\t#include <packing>\n\t\tfloat pointToLineDistance(vec3 x0, vec3 x1, vec3 x2) {\n\t\t\t//x0: point, x1: linePointA, x2: linePointB\n\t\t\t//https://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html\n\t\t\treturn length(cross(x0-x1,x0-x2))/length(x2-x1);\n\t\t}\n\t\tfloat pointPlaneDistance(vec3 point,vec3 planePoint,vec3 planeNormal){\n\t\t\t// https://mathworld.wolfram.com/Point-PlaneDistance.html\n\t\t\t//// https://en.wikipedia.org/wiki/Plane_(geometry)\n\t\t\t//// http://paulbourke.net/geometry/pointlineplane/\n\t\t\tfloat a=planeNormal.x,b=planeNormal.y,c=planeNormal.z;\n\t\t\tfloat x0=point.x,y0=point.y,z0=point.z;\n\t\t\tfloat x=planePoint.x,y=planePoint.y,z=planePoint.z;\n\t\t\tfloat d=-(a*x+b*y+c*z);\n\t\t\tfloat distance=(a*x0+b*y0+c*z0+d)/sqrt(a*a+b*b+c*c);\n\t\t\treturn distance;\n\t\t}\n\t\tfloat getDepth( const in vec2 uv ) {\n\t\t\treturn texture2D( tDepth, uv ).x;\n\t\t}\n\t\tfloat getViewZ( const in float depth ) {\n\t\t\t#ifdef PERSPECTIVE_CAMERA\n\t\t\t\treturn perspectiveDepthToViewZ( depth, cameraNear, cameraFar );\n\t\t\t#else\n\t\t\t\treturn orthographicDepthToViewZ( depth, cameraNear, cameraFar );\n\t\t\t#endif\n\t\t}\n\t\tvec3 getViewPosition( const in vec2 uv, const in float depth/*clip space*/, const in float clipW ) {\n\t\t\tvec4 clipPosition = vec4( ( vec3( uv, depth ) - 0.5 ) * 2.0, 1.0 );//ndc\n\t\t\tclipPosition *= clipW; //clip\n\t\t\treturn ( cameraInverseProjectionMatrix * clipPosition ).xyz;//view\n\t\t}\n\t\tvec3 getViewNormal( const in vec2 uv ) {\n\t\t\treturn unpackRGBToNormal( texture2D( tNormal, uv ).xyz );\n\t\t}\n\t\tvec2 viewPositionToXY(vec3 viewPosition){\n\t\t\tvec2 xy;\n\t\t\tvec4 clip=cameraProjectionMatrix*vec4(viewPosition,1);\n\t\t\txy=clip.xy;//clip\n\t\t\tfloat clipW=clip.w;\n\t\t\txy/=clipW;//NDC\n\t\t\txy=(xy+1.)/2.;//uv\n\t\t\txy*=resolution;//screen\n\t\t\treturn xy;\n\t\t}\n\t\tvoid main(){\n\t\t\t#ifdef SELECTIVE\n\t\t\t\tfloat metalness=texture2D(tMetalness,vUv).r;\n\t\t\t\tif(metalness==0.) return;\n\t\t\t#endif\n\n\t\t\tfloat depth = getDepth( vUv );\n\t\t\tfloat viewZ = getViewZ( depth );\n\t\t\tif(-viewZ>=cameraFar) return;\n\n\t\t\tfloat clipW = cameraProjectionMatrix[2][3] * viewZ+cameraProjectionMatrix[3][3];\n\t\t\tvec3 viewPosition=getViewPosition( vUv, depth, clipW );\n\n\t\t\tvec2 d0=gl_FragCoord.xy;\n\t\t\tvec2 d1;\n\n\t\t\tvec3 viewNormal=getViewNormal( vUv );\n\n\t\t\t#ifdef PERSPECTIVE_CAMERA\n\t\t\t\tvec3 viewIncidentDir=normalize(viewPosition);\n\t\t\t\tvec3 viewReflectDir=reflect(viewIncidentDir,viewNormal);\n\t\t\t#else\n\t\t\t\tvec3 viewIncidentDir=vec3(0,0,-1);\n\t\t\t\tvec3 viewReflectDir=reflect(viewIncidentDir,viewNormal);\n\t\t\t#endif\n\n\t\t\tfloat maxReflectRayLen=maxDistance/dot(-viewIncidentDir,viewNormal);\n\t\t\t// dot(a,b)==length(a)*length(b)*cos(theta) // https://www.mathsisfun.com/algebra/vectors-dot-product.html\n\t\t\t// if(a.isNormalized&&b.isNormalized) dot(a,b)==cos(theta)\n\t\t\t// maxDistance/maxReflectRayLen=cos(theta)\n\t\t\t// maxDistance/maxReflectRayLen==dot(a,b)\n\t\t\t// maxReflectRayLen==maxDistance/dot(a,b)\n\n\t\t\tvec3 d1viewPosition=viewPosition+viewReflectDir*maxReflectRayLen;\n\t\t\t#ifdef PERSPECTIVE_CAMERA\n\t\t\t\tif(d1viewPosition.z>-cameraNear){\n\t\t\t\t\t//https://tutorial.math.lamar.edu/Classes/CalcIII/EqnsOfLines.aspx\n\t\t\t\t\tfloat t=(-cameraNear-viewPosition.z)/viewReflectDir.z;\n\t\t\t\t\td1viewPosition=viewPosition+viewReflectDir*t;\n\t\t\t\t}\n\t\t\t#endif\n\t\t\td1=viewPositionToXY(d1viewPosition);\n\n\t\t\tfloat totalLen=length(d1-d0);\n\t\t\tfloat xLen=d1.x-d0.x;\n\t\t\tfloat yLen=d1.y-d0.y;\n\t\t\tfloat totalStep=max(abs(xLen),abs(yLen));\n\t\t\tfloat xSpan=xLen/totalStep;\n\t\t\tfloat ySpan=yLen/totalStep;\n\t\t\tfor(float i=0.;i<float(MAX_STEP);i++){\n\t\t\t\tif(i>=totalStep) break;\n\t\t\t\tvec2 xy=vec2(d0.x+i*xSpan,d0.y+i*ySpan);\n\t\t\t\tif(xy.x<0.||xy.x>resolution.x||xy.y<0.||xy.y>resolution.y) break;\n\t\t\t\tfloat s=length(xy-d0)/totalLen;\n\t\t\t\tvec2 uv=xy/resolution;\n\n\t\t\t\tfloat d = getDepth(uv);\n\t\t\t\tfloat vZ = getViewZ( d );\n\t\t\t\tif(-vZ>=cameraFar) continue;\n\t\t\t\tfloat cW = cameraProjectionMatrix[2][3] * vZ+cameraProjectionMatrix[3][3];\n\t\t\t\tvec3 vP=getViewPosition( uv, d, cW );\n\n\t\t\t\t#ifdef PERSPECTIVE_CAMERA\n\t\t\t\t\t// https://comp.nus.edu.sg/~lowkl/publications/lowk_persp_interp_techrep.pdf\n\t\t\t\t\tfloat recipVPZ=1./viewPosition.z;\n\t\t\t\t\tfloat viewReflectRayZ=1./(recipVPZ+s*(1./d1viewPosition.z-recipVPZ));\n\t\t\t\t#else\n\t\t\t\t\tfloat viewReflectRayZ=viewPosition.z+s*(d1viewPosition.z-viewPosition.z);\n\t\t\t\t#endif\n\n\t\t\t\t// if(viewReflectRayZ>vZ) continue; // will cause \"npm run make-screenshot webgl_postprocessing_ssr\" high probability hang.\n\t\t\t\t// https://github.com/mrdoob/three.js/pull/21539#issuecomment-821061164\n\t\t\t\tif(viewReflectRayZ<=vZ){\n\n\t\t\t\t\tbool hit;\n\t\t\t\t\t#ifdef INFINITE_THICK\n\t\t\t\t\t\thit=true;\n\t\t\t\t\t#else\n\t\t\t\t\t\tfloat away=pointToLineDistance(vP,viewPosition,d1viewPosition);\n\n\t\t\t\t\t\tfloat minThickness;\n\t\t\t\t\t\tvec2 xyNeighbor=xy;\n\t\t\t\t\t\txyNeighbor.x+=1.;\n\t\t\t\t\t\tvec2 uvNeighbor=xyNeighbor/resolution;\n\t\t\t\t\t\tvec3 vPNeighbor=getViewPosition(uvNeighbor,d,cW);\n\t\t\t\t\t\tminThickness=vPNeighbor.x-vP.x;\n\t\t\t\t\t\tminThickness*=3.;\n\t\t\t\t\t\tfloat tk=max(minThickness,thickness);\n\n\t\t\t\t\t\thit=away<=tk;\n\t\t\t\t\t#endif\n\n\t\t\t\t\tif(hit){\n\t\t\t\t\t\tvec3 vN=getViewNormal( uv );\n\t\t\t\t\t\tif(dot(viewReflectDir,vN)>=0.) continue;\n\t\t\t\t\t\tfloat distance=pointPlaneDistance(vP,viewPosition,viewNormal);\n\t\t\t\t\t\tif(distance>maxDistance) break;\n\t\t\t\t\t\tfloat op=opacity;\n\t\t\t\t\t\t#ifdef DISTANCE_ATTENUATION\n\t\t\t\t\t\t\tfloat ratio=1.-(distance/maxDistance);\n\t\t\t\t\t\t\tfloat attenuation=ratio*ratio;\n\t\t\t\t\t\t\top=opacity*attenuation;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#ifdef FRESNEL\n\t\t\t\t\t\t\tfloat fresnelCoe=(dot(viewIncidentDir,viewReflectDir)+1.)/2.;\n\t\t\t\t\t\t\top*=fresnelCoe;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\tvec4 reflectColor=texture2D(tDiffuse,uv);\n\t\t\t\t\t\tgl_FragColor.xyz=reflectColor.xyz;\n\t\t\t\t\t\tgl_FragColor.a=op;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`\n\n};\n\nconst SSRDepthShader = {\n\n\tdefines: {\n\t\t'PERSPECTIVE_CAMERA': 1\n\t},\n\n\tuniforms: {\n\n\t\t'tDepth': { value: null },\n\t\t'cameraNear': { value: null },\n\t\t'cameraFar': { value: null },\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDepth;\n\n\t\tuniform float cameraNear;\n\t\tuniform float cameraFar;\n\n\t\tvarying vec2 vUv;\n\n\t\t#include <packing>\n\n\t\tfloat getLinearDepth( const in vec2 uv ) {\n\n\t\t\t#if PERSPECTIVE_CAMERA == 1\n\n\t\t\t\tfloat fragCoordZ = texture2D( tDepth, uv ).x;\n\t\t\t\tfloat viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );\n\t\t\t\treturn viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\n\n\t\t\t#else\n\n\t\t\t\treturn texture2D( tDepth, uv ).x;\n\n\t\t\t#endif\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tfloat depth = getLinearDepth( vUv );\n\t\t\tfloat d = 1.0 - depth;\n\t\t\t// d=(d-.999)*1000.;\n\t\t\tgl_FragColor = vec4( vec3( d ), 1.0 );\n\n\t\t}\n\n\t`\n\n};\n\nconst SSRBlurShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'resolution': { value: new Vector2() },\n\t\t'opacity': { value: .5 },\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 resolution;\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\t//reverse engineering from PhotoShop blur filter, then change coefficient\n\n\t\t\tvec2 texelSize = ( 1.0 / resolution );\n\n\t\t\tvec4 c=texture2D(tDiffuse,vUv);\n\n\t\t\tvec2 offset;\n\n\t\t\toffset=(vec2(-1,0))*texelSize;\n\t\t\tvec4 cl=texture2D(tDiffuse,vUv+offset);\n\n\t\t\toffset=(vec2(1,0))*texelSize;\n\t\t\tvec4 cr=texture2D(tDiffuse,vUv+offset);\n\n\t\t\toffset=(vec2(0,-1))*texelSize;\n\t\t\tvec4 cb=texture2D(tDiffuse,vUv+offset);\n\n\t\t\toffset=(vec2(0,1))*texelSize;\n\t\t\tvec4 ct=texture2D(tDiffuse,vUv+offset);\n\n\t\t\t// float coeCenter=.5;\n\t\t\t// float coeSide=.125;\n\t\t\tfloat coeCenter=.2;\n\t\t\tfloat coeSide=.2;\n\t\t\tfloat a=c.a*coeCenter+cl.a*coeSide+cr.a*coeSide+cb.a*coeSide+ct.a*coeSide;\n\t\t\tvec3 rgb=(c.rgb*c.a*coeCenter+cl.rgb*cl.a*coeSide+cr.rgb*cr.a*coeSide+cb.rgb*cb.a*coeSide+ct.rgb*ct.a*coeSide)/a;\n\t\t\tgl_FragColor=vec4(rgb,a);\n\n\t\t}\n\t`\n\n\n};\n\nexport { SSRShader, SSRDepthShader, SSRBlurShader };\n", "import {\n\tAddEquation,\n\tColor,\n\tNormalBlending,\n\tDepthTexture,\n\tSrcAlphaFactor,\n\tOneMinusSrcAlphaFactor,\n\tMeshNormalMaterial,\n\tMeshBasicMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tUnsignedShortType,\n\tWebGLRenderTarget,\n\tHalfFloatType,\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SSRShader } from '../shaders/SSRShader.js';\nimport { SSRBlurShader } from '../shaders/SSRShader.js';\nimport { SSRDepthShader } from '../shaders/SSRShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SSRPass extends Pass {\n\n\tconstructor( { renderer, scene, camera, width, height, selects, bouncing = false, groundReflector } ) {\n\n\t\tsuper();\n\n\t\tthis.width = ( width !== undefined ) ? width : 512;\n\t\tthis.height = ( height !== undefined ) ? height : 512;\n\n\t\tthis.clear = true;\n\n\t\tthis.renderer = renderer;\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\t\tthis.groundReflector = groundReflector;\n\n\t\tthis.opacity = SSRShader.uniforms.opacity.value;\n\t\tthis.output = 0;\n\n\t\tthis.maxDistance = SSRShader.uniforms.maxDistance.value;\n\t\tthis.thickness = SSRShader.uniforms.thickness.value;\n\n\t\tthis.tempColor = new Color();\n\n\t\tthis._selects = selects;\n\t\tthis.selective = Array.isArray( this._selects );\n\t\tObject.defineProperty( this, 'selects', {\n\t\t\tget() {\n\n\t\t\t\treturn this._selects;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._selects === val ) return;\n\t\t\t\tthis._selects = val;\n\t\t\t\tif ( Array.isArray( val ) ) {\n\n\t\t\t\t\tthis.selective = true;\n\t\t\t\t\tthis.ssrMaterial.defines.SELECTIVE = true;\n\t\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.selective = false;\n\t\t\t\t\tthis.ssrMaterial.defines.SELECTIVE = false;\n\t\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t} );\n\n\t\tthis._bouncing = bouncing;\n\t\tObject.defineProperty( this, 'bouncing', {\n\t\t\tget() {\n\n\t\t\t\treturn this._bouncing;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._bouncing === val ) return;\n\t\t\t\tthis._bouncing = val;\n\t\t\t\tif ( val ) {\n\n\t\t\t\t\tthis.ssrMaterial.uniforms[ 'tDiffuse' ].value = this.prevRenderTarget.texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.ssrMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.blur = true;\n\n\t\tthis._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n\t\tObject.defineProperty( this, 'distanceAttenuation', {\n\t\t\tget() {\n\n\t\t\t\treturn this._distanceAttenuation;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._distanceAttenuation === val ) return;\n\t\t\t\tthis._distanceAttenuation = val;\n\t\t\t\tthis.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t}\n\t\t} );\n\n\n\t\tthis._fresnel = SSRShader.defines.FRESNEL;\n\t\tObject.defineProperty( this, 'fresnel', {\n\t\t\tget() {\n\n\t\t\t\treturn this._fresnel;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._fresnel === val ) return;\n\t\t\t\tthis._fresnel = val;\n\t\t\t\tthis.ssrMaterial.defines.FRESNEL = val;\n\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis._infiniteThick = SSRShader.defines.INFINITE_THICK;\n\t\tObject.defineProperty( this, 'infiniteThick', {\n\t\t\tget() {\n\n\t\t\t\treturn this._infiniteThick;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._infiniteThick === val ) return;\n\t\t\t\tthis._infiniteThick = val;\n\t\t\t\tthis.ssrMaterial.defines.INFINITE_THICK = val;\n\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t}\n\t\t} );\n\n\t\t// beauty render target with depth buffer\n\n\t\tconst depthTexture = new DepthTexture();\n\t\tdepthTexture.type = UnsignedShortType;\n\t\tdepthTexture.minFilter = NearestFilter;\n\t\tdepthTexture.magFilter = NearestFilter;\n\n\t\tthis.beautyRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\tdepthTexture: depthTexture,\n\t\t\tdepthBuffer: true\n\t\t} );\n\n\t\t//for bouncing\n\t\tthis.prevRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t} );\n\n\t\t// normal render target\n\n\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t} );\n\n\t\t// metalness render target\n\n\t\tthis.metalnessRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t} );\n\n\n\n\t\t// ssr render target\n\n\t\tthis.ssrRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t} );\n\n\t\tthis.blurRenderTarget = this.ssrRenderTarget.clone();\n\t\tthis.blurRenderTarget2 = this.ssrRenderTarget.clone();\n\t\t// this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n\n\t\t// ssr material\n\n\t\tif ( SSRShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.SSRPass: The pass relies on SSRShader.' );\n\n\t\t}\n\n\t\tthis.ssrMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRShader.defines, {\n\t\t\t\tMAX_STEP: Math.sqrt( this.width * this.width + this.height * this.height )\n\t\t\t} ),\n\t\t\tuniforms: UniformsUtils.clone( SSRShader.uniforms ),\n\t\t\tvertexShader: SSRShader.vertexShader,\n\t\t\tfragmentShader: SSRShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\n\t\tthis.ssrMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\tthis.ssrMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\tthis.ssrMaterial.defines.SELECTIVE = this.selective;\n\t\tthis.ssrMaterial.needsUpdate = true;\n\t\tthis.ssrMaterial.uniforms[ 'tMetalness' ].value = this.metalnessRenderTarget.texture;\n\t\tthis.ssrMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\t\tthis.ssrMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.ssrMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\tthis.ssrMaterial.uniforms[ 'thickness' ].value = this.thickness;\n\t\tthis.ssrMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\t\tthis.ssrMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssrMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\t// normal material\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\t// metalnessOn material\n\n\t\tthis.metalnessOnMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 'white'\n\t\t} );\n\n\t\t// metalnessOff material\n\n\t\tthis.metalnessOffMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 'black'\n\t\t} );\n\n\t\t// blur material\n\n\t\tthis.blurMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRBlurShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSRBlurShader.uniforms ),\n\t\t\tvertexShader: SSRBlurShader.vertexShader,\n\t\t\tfragmentShader: SSRBlurShader.fragmentShader\n\t\t} );\n\t\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t\t// blur material 2\n\n\t\tthis.blurMaterial2 = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRBlurShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSRBlurShader.uniforms ),\n\t\t\tvertexShader: SSRBlurShader.vertexShader,\n\t\t\tfragmentShader: SSRBlurShader.fragmentShader\n\t\t} );\n\t\tthis.blurMaterial2.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\tthis.blurMaterial2.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t\t// // blur material 3\n\n\t\t// this.blurMaterial3 = new ShaderMaterial({\n\t\t//   defines: Object.assign({}, SSRBlurShader.defines),\n\t\t//   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n\t\t//   vertexShader: SSRBlurShader.vertexShader,\n\t\t//   fragmentShader: SSRBlurShader.fragmentShader\n\t\t// });\n\t\t// this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n\t\t// this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n\n\t\t// material for rendering the depth\n\n\t\tthis.depthRenderMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRDepthShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSRDepthShader.uniforms ),\n\t\t\tvertexShader: SSRDepthShader.vertexShader,\n\t\t\tfragmentShader: SSRDepthShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t\t// material for rendering the content of a render target\n\n\t\tthis.copyMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblendSrc: SrcAlphaFactor,\n\t\t\tblendDst: OneMinusSrcAlphaFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: SrcAlphaFactor,\n\t\t\tblendDstAlpha: OneMinusSrcAlphaFactor,\n\t\t\tblendEquationAlpha: AddEquation,\n\t\t\t// premultipliedAlpha:true,\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t\tthis.originalClearColor = new Color();\n\n\t}\n\n\tdispose() {\n\n\t\t// dispose render targets\n\n\t\tthis.beautyRenderTarget.dispose();\n\t\tthis.prevRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.metalnessRenderTarget.dispose();\n\t\tthis.ssrRenderTarget.dispose();\n\t\tthis.blurRenderTarget.dispose();\n\t\tthis.blurRenderTarget2.dispose();\n\t\t// this.blurRenderTarget3.dispose();\n\n\t\t// dispose materials\n\n\t\tthis.normalMaterial.dispose();\n\t\tthis.metalnessOnMaterial.dispose();\n\t\tthis.metalnessOffMaterial.dispose();\n\t\tthis.blurMaterial.dispose();\n\t\tthis.blurMaterial2.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\n\t\t// dipsose full screen quad\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\trender( renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */ ) {\n\n\t\t// render beauty and depth\n\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\trenderer.clear();\n\t\tif ( this.groundReflector ) {\n\n\t\t\tthis.groundReflector.visible = false;\n\t\t\tthis.groundReflector.doRender( this.renderer, this.scene, this.camera );\n\t\t\tthis.groundReflector.visible = true;\n\n\t\t}\n\n\t\trenderer.render( this.scene, this.camera );\n\t\tif ( this.groundReflector ) this.groundReflector.visible = false;\n\n\t\t// render normals\n\n\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0, 0 );\n\n\t\t// render metalnesses\n\n\t\tif ( this.selective ) {\n\n\t\t\tthis.renderMetalness( renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0 );\n\n\t\t}\n\n\t\t// render SSR\n\n\t\tthis.ssrMaterial.uniforms[ 'opacity' ].value = this.opacity;\n\t\tthis.ssrMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\n\t\tthis.ssrMaterial.uniforms[ 'thickness' ].value = this.thickness;\n\t\tthis.renderPass( renderer, this.ssrMaterial, this.ssrRenderTarget );\n\n\n\t\t// render blur\n\n\t\tif ( this.blur ) {\n\n\t\t\tthis.renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\n\t\t\tthis.renderPass( renderer, this.blurMaterial2, this.blurRenderTarget2 );\n\t\t\t// this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n\n\t\t}\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase SSRPass.OUTPUT.Default:\n\n\t\t\t\tif ( this.bouncing ) {\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t\tif ( this.blur )\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NormalBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.prevRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t\tif ( this.blur )\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NormalBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase SSRPass.OUTPUT.SSR:\n\n\t\t\t\tif ( this.blur )\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\telse\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tif ( this.bouncing ) {\n\n\t\t\t\t\tif ( this.blur )\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NormalBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Beauty:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Depth:\n\n\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Metalness:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.metalnessRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.SSRPass: Unknown output type.' );\n\n\t\t}\n\n\t}\n\n\trenderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\tthis.originalClearColor.copy( renderer.getClearColor( this.tempColor ) );\n\t\tconst originalClearAlpha = renderer.getClearAlpha( this.tempColor );\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\trenderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\tthis.originalClearColor.copy( renderer.getClearColor( this.tempColor ) );\n\t\tconst originalClearAlpha = renderer.getClearAlpha( this.tempColor );\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\trenderMetalness( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\tthis.originalClearColor.copy( renderer.getClearColor( this.tempColor ) );\n\t\tconst originalClearAlpha = renderer.getClearAlpha( this.tempColor );\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.traverseVisible( child => {\n\n\t\t\tchild._SSRPassBackupMaterial = child.material;\n\t\t\tif ( this._selects.includes( child ) ) {\n\n\t\t\t\tchild.material = this.metalnessOnMaterial;\n\n\t\t\t} else {\n\n\t\t\t\tchild.material = this.metalnessOffMaterial;\n\n\t\t\t}\n\n\t\t} );\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.traverseVisible( child => {\n\n\t\t\tchild.material = child._SSRPassBackupMaterial;\n\n\t\t} );\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.ssrMaterial.defines.MAX_STEP = Math.sqrt( width * width + height * height );\n\t\tthis.ssrMaterial.needsUpdate = true;\n\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\tthis.prevRenderTarget.setSize( width, height );\n\t\tthis.ssrRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.metalnessRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget2.setSize( width, height );\n\t\t// this.blurRenderTarget3.setSize(width, height);\n\n\t\tthis.ssrMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.ssrMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssrMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.blurMaterial2.uniforms[ 'resolution' ].value.set( width, height );\n\n\t}\n\n}\n\nSSRPass.OUTPUT = {\n\t'Default': 0,\n\t'SSR': 1,\n\t'Beauty': 3,\n\t'Depth': 4,\n\t'Normal': 5,\n\t'Metalness': 7,\n};\n\nexport { SSRPass };\n", null, "import {\n\tAdditiveBlending,\n\tColor,\n\tDoubleSide,\n\tMatrix4,\n\tMeshDepthMaterial,\n\tNoBlending,\n\tRGBADepthPacking,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass OutlinePass extends Pass {\n\n\tconstructor( resolution, scene, camera, selectedObjects ) {\n\n\t\tsuper();\n\n\t\tthis.renderScene = scene;\n\t\tthis.renderCamera = camera;\n\t\tthis.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n\t\tthis.visibleEdgeColor = new Color( 1, 1, 1 );\n\t\tthis.hiddenEdgeColor = new Color( 0.1, 0.04, 0.02 );\n\t\tthis.edgeGlow = 0.0;\n\t\tthis.usePatternTexture = false;\n\t\tthis.edgeThickness = 1.0;\n\t\tthis.edgeStrength = 3.0;\n\t\tthis.downSampleRatio = 2;\n\t\tthis.pulsePeriod = 0;\n\n\t\tthis._visibilityCache = new Map();\n\n\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\tconst resx = Math.round( this.resolution.x / this.downSampleRatio );\n\t\tconst resy = Math.round( this.resolution.y / this.downSampleRatio );\n\n\t\tthis.renderTargetMaskBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y );\n\t\tthis.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n\t\tthis.renderTargetMaskBuffer.texture.generateMipmaps = false;\n\n\t\tthis.depthMaterial = new MeshDepthMaterial();\n\t\tthis.depthMaterial.side = DoubleSide;\n\t\tthis.depthMaterial.depthPacking = RGBADepthPacking;\n\t\tthis.depthMaterial.blending = NoBlending;\n\n\t\tthis.prepareMaskMaterial = this.getPrepareMaskMaterial();\n\t\tthis.prepareMaskMaterial.side = DoubleSide;\n\t\tthis.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ( this.prepareMaskMaterial.fragmentShader, this.renderCamera );\n\n\t\tthis.renderTargetDepthBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y );\n\t\tthis.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n\t\tthis.renderTargetDepthBuffer.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget( resx, resy );\n\t\tthis.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n\t\tthis.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetBlurBuffer1 = new WebGLRenderTarget( resx, resy );\n\t\tthis.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n\t\tthis.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n\t\tthis.renderTargetBlurBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ) );\n\t\tthis.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n\t\tthis.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n\n\t\tthis.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n\t\tthis.renderTargetEdgeBuffer1 = new WebGLRenderTarget( resx, resy );\n\t\tthis.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n\t\tthis.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n\t\tthis.renderTargetEdgeBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ) );\n\t\tthis.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n\t\tthis.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n\n\t\tconst MAX_EDGE_THICKNESS = 4;\n\t\tconst MAX_EDGE_GLOW = 4;\n\n\t\tthis.separableBlurMaterial1 = this.getSeperableBlurMaterial( MAX_EDGE_THICKNESS );\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\n\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = 1;\n\t\tthis.separableBlurMaterial2 = this.getSeperableBlurMaterial( MAX_EDGE_GLOW );\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( Math.round( resx / 2 ), Math.round( resy / 2 ) );\n\t\tthis.separableBlurMaterial2.uniforms[ 'kernelRadius' ].value = MAX_EDGE_GLOW;\n\n\t\t// Overlay material\n\t\tthis.overlayMaterial = this.getOverlayMaterial();\n\n\t\t// copy material\n\t\tif ( CopyShader === undefined ) console.error( 'THREE.OutlinePass relies on CopyShader' );\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\t\tthis.copyUniforms[ 'opacity' ].value = 1.0;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t\tthis.tempPulseColor1 = new Color();\n\t\tthis.tempPulseColor2 = new Color();\n\t\tthis.textureMatrix = new Matrix4();\n\n\t\tfunction replaceDepthToViewZ( string, camera ) {\n\n\t\t\tconst type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n\n\t\t\treturn string.replace( /DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ' );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTargetMaskBuffer.dispose();\n\t\tthis.renderTargetDepthBuffer.dispose();\n\t\tthis.renderTargetMaskDownSampleBuffer.dispose();\n\t\tthis.renderTargetBlurBuffer1.dispose();\n\t\tthis.renderTargetBlurBuffer2.dispose();\n\t\tthis.renderTargetEdgeBuffer1.dispose();\n\t\tthis.renderTargetEdgeBuffer2.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.renderTargetMaskBuffer.setSize( width, height );\n\t\tthis.renderTargetDepthBuffer.setSize( width, height );\n\n\t\tlet resx = Math.round( width / this.downSampleRatio );\n\t\tlet resy = Math.round( height / this.downSampleRatio );\n\t\tthis.renderTargetMaskDownSampleBuffer.setSize( resx, resy );\n\t\tthis.renderTargetBlurBuffer1.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer1.setSize( resx, resy );\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\t\tresy = Math.round( resy / 2 );\n\n\t\tthis.renderTargetBlurBuffer2.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer2.setSize( resx, resy );\n\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( resx, resy );\n\n\t}\n\n\tchangeVisibilityOfSelectedObjects( bVisible ) {\n\n\t\tconst cache = this._visibilityCache;\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( bVisible === true ) {\n\n\t\t\t\t\tobject.visible = cache.get( object );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcache.set( object, object.visible );\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tconst selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t}\n\n\tchangeVisibilityOfNonSelectedObjects( bVisible ) {\n\n\t\tconst cache = this._visibilityCache;\n\t\tconst selectedMeshes = [];\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) selectedMeshes.push( object );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tconst selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t\tfunction VisibilityChangeCallBack( object ) {\n\n\t\t\tif ( object.isMesh || object.isSprite ) {\n\n\t\t\t\t// only meshes and sprites are supported by OutlinePass\n\n\t\t\t\tlet bFound = false;\n\n\t\t\t\tfor ( let i = 0; i < selectedMeshes.length; i ++ ) {\n\n\t\t\t\t\tconst selectedObjectId = selectedMeshes[ i ].id;\n\n\t\t\t\t\tif ( selectedObjectId === object.id ) {\n\n\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( bFound === false ) {\n\n\t\t\t\t\tconst visibility = object.visible;\n\n\t\t\t\t\tif ( bVisible === false || cache.get( object ) === true ) {\n\n\t\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcache.set( object, visibility );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints || object.isLine ) {\n\n\t\t\t\t// the visibilty of points and lines is always set to false in order to\n\t\t\t\t// not affect the outline computation\n\n\t\t\t\tif ( bVisible === true ) {\n\n\t\t\t\t\tobject.visible = cache.get( object ); // restore\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcache.set( object, object.visible );\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderScene.traverse( VisibilityChangeCallBack );\n\n\t}\n\n\tupdateTextureMatrix() {\n\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0 );\n\t\tthis.textureMatrix.multiply( this.renderCamera.projectionMatrix );\n\t\tthis.textureMatrix.multiply( this.renderCamera.matrixWorldInverse );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( this.selectedObjects.length > 0 ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\t\tconst oldAutoClear = renderer.autoClear;\n\n\t\t\trenderer.autoClear = false;\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t\trenderer.setClearColor( 0xffffff, 1 );\n\n\t\t\t// Make selected objects invisible\n\t\t\tthis.changeVisibilityOfSelectedObjects( false );\n\n\t\t\tconst currentBackground = this.renderScene.background;\n\t\t\tthis.renderScene.background = null;\n\n\t\t\t// 1. Draw Non Selected objects in the depth buffer\n\t\t\tthis.renderScene.overrideMaterial = this.depthMaterial;\n\t\t\trenderer.setRenderTarget( this.renderTargetDepthBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\n\t\t\t// Make selected objects visible\n\t\t\tthis.changeVisibilityOfSelectedObjects( true );\n\t\t\tthis._visibilityCache.clear();\n\n\t\t\t// Update Texture Matrix for Depth compare\n\t\t\tthis.updateTextureMatrix();\n\n\t\t\t// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( false );\n\t\t\tthis.renderScene.overrideMaterial = this.prepareMaskMaterial;\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'cameraNearFar' ].value.set( this.renderCamera.near, this.renderCamera.far );\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'depthTexture' ].value = this.renderTargetDepthBuffer.texture;\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'textureMatrix' ].value = this.textureMatrix;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\t\t\tthis.renderScene.overrideMaterial = null;\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( true );\n\t\t\tthis._visibilityCache.clear();\n\n\t\t\tthis.renderScene.background = currentBackground;\n\n\t\t\t// 2. Downsample to Half resolution\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetMaskBuffer.texture;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskDownSampleBuffer );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.tempPulseColor1.copy( this.visibleEdgeColor );\n\t\t\tthis.tempPulseColor2.copy( this.hiddenEdgeColor );\n\n\t\t\tif ( this.pulsePeriod > 0 ) {\n\n\t\t\t\tconst scalar = ( 1 + 0.25 ) / 2 + Math.cos( performance.now() * 0.01 / this.pulsePeriod ) * ( 1.0 - 0.25 ) / 2;\n\t\t\t\tthis.tempPulseColor1.multiplyScalar( scalar );\n\t\t\t\tthis.tempPulseColor2.multiplyScalar( scalar );\n\n\t\t\t}\n\n\t\t\t// 3. Apply Edge Detection Pass\n\t\t\tthis.fsQuad.material = this.edgeDetectionMaterial;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskDownSampleBuffer.texture;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'texSize' ].value.set( this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height );\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'visibleEdgeColor' ].value = this.tempPulseColor1;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'hiddenEdgeColor' ].value = this.tempPulseColor2;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// 4. Apply Blur on Half res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial1;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = this.edgeThickness;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Apply Blur on quarter res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial2;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer2.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Blend it additively over the input texture\n\t\t\tthis.fsQuad.material = this.overlayMaterial;\n\t\t\tthis.overlayMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskBuffer.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture1' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture2' ].value = this.renderTargetEdgeBuffer2.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'patternTexture' ].value = this.patternTexture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeStrength' ].value = this.edgeStrength;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeGlow' ].value = this.edgeGlow;\n\t\t\tthis.overlayMaterial.uniforms[ 'usePatternTexture' ].value = this.usePatternTexture;\n\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t}\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tgetPrepareMaskMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'depthTexture': { value: null },\n\t\t\t\t'cameraNearFar': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'textureMatrix': { value: null }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\n\t\t\t\t}`\n\n\t\t} );\n\n\t}\n\n\tgetEdgeDetectionMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'maskTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'visibleEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t\t'hiddenEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetSeperableBlurMaterial( maxRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'MAX_RADIUS': maxRadius,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'kernelRadius': { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetOverlayMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'maskTexture': { value: null },\n\t\t\t\t'edgeTexture1': { value: null },\n\t\t\t\t'edgeTexture2': { value: null },\n\t\t\t\t'patternTexture': { value: null },\n\t\t\t\t'edgeStrength': { value: 1.0 },\n\t\t\t\t'edgeGlow': { value: 1.0 },\n\t\t\t\t'usePatternTexture': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t}\n\n}\n\nOutlinePass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nOutlinePass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { OutlinePass };\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
  "mappings": "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",
  "names": []
}
