import {
  onBeforeRender
} from "./chunk-J7HA7FW3.js";
import {
  Cancellable,
  Disposable,
  createEffect,
  debounce,
  event_default,
  store
} from "./chunk-NXCTIVNA.js";
import {
  Clock,
  WebGLRenderer
} from "./chunk-57VJUUAA.js";
import {
  __publicField
} from "./chunk-XA4H47DG.js";

// node_modules/lingo3d/lib/states/usePaused.js
var [setPaused, getPaused] = store(false);

// node_modules/lingo3d/lib/api/utils/isChromium.js
var isChromium_default = !!window.chrome;

// node_modules/lingo3d/lib/api/utils/isMobile.js
var isMobile_default = (() => {
  const ua = navigator.userAgent;
  if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(ua)) {
    return true;
  } else if (/Mobile|Android|iP(hone|od)|IEMobile|BlackBerry|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(ua)) {
    return true;
  }
  return false;
})();

// node_modules/lingo3d/lib/states/useAntiAlias.js
var [setAntiAlias, getAntiAlias] = store(isMobile_default ? "SSAA" : "MSAA");

// node_modules/lingo3d/lib/states/useBackgroundColor.js
var [setBackgroundColor, getBackgroundColor] = store("#000000");

// node_modules/lingo3d/lib/states/useEffectComposerPassCount.js
var [setEffectComposerPassCount, getEffectComposerPassCount] = store(0);

// node_modules/lingo3d/lib/states/useLogarithmicDepth.js
var [setLogarithmicDepth, getLogarithmicDepth] = store(false);

// node_modules/lingo3d/lib/states/useRenderer.js
var [setRenderer, getRenderer] = store(void 0);
createEffect(() => {
  const renderer = new WebGLRenderer({
    powerPreference: "high-performance",
    alpha: getBackgroundColor() === "transparent",
    logarithmicDepthBuffer: isChromium_default && !isMobile_default ? getLogarithmicDepth() : false,
    antialias: !!(!getEffectComposerPassCount() && getAntiAlias())
  });
  setRenderer(renderer);
  return () => {
    renderer.dispose();
  };
}, [getBackgroundColor, getLogarithmicDepth, getAntiAlias, getEffectComposerPassCount]);

// node_modules/lingo3d/lib/engine/eventLoop.js
var paused = getPaused();
getPaused((val) => paused = val);
var timer = (time, repeat, cb) => {
  let count2 = 0;
  const handle = setInterval(() => {
    if (document.hidden || paused)
      return;
    cb();
    if (repeat !== -1 && ++count2 >= repeat)
      clearInterval(handle);
  }, time);
  return new Cancellable(() => clearInterval(handle));
};
var count = 0;
var callbacks = /* @__PURE__ */ new Set();
var clock = new Clock();
getRenderer((renderer) => {
  renderer == null ? void 0 : renderer.setAnimationLoop(() => {
    const fps = 1 / clock.getDelta();
    if (paused || ++count < Math.round(fps / 60))
      return;
    count = 0;
    for (const cb of callbacks)
      cb();
  });
});
var loop = (cb) => {
  callbacks.add(cb);
  return new Cancellable(() => callbacks.delete(cb));
};

// node_modules/lingo3d/lib/events/onSceneGraphChange.js
var [_emitSceneGraphChange, onSceneGraphChange] = event_default();
var emitSceneGraphChange = debounce(_emitSceneGraphChange, 0, "trailing");

// node_modules/lingo3d/lib/api/core/Appendable.js
var appendableRoot = /* @__PURE__ */ new Set();
var hiddenAppendables = /* @__PURE__ */ new WeakSet();
var Appendable = class extends Disposable {
  constructor(outerObject3d) {
    super();
    __publicField(this, "outerObject3d");
    __publicField(this, "parent");
    __publicField(this, "children");
    this.outerObject3d = outerObject3d;
    outerObject3d.userData.manager = this;
    appendableRoot.add(this);
    emitSceneGraphChange();
  }
  get uuid() {
    return this.outerObject3d.uuid;
  }
  _append(child) {
    var _a, _b, _c;
    appendableRoot.delete(child);
    emitSceneGraphChange();
    (_b = (_a = child.parent) == null ? void 0 : _a.children) == null ? void 0 : _b.delete(child);
    child.parent = this;
    ((_c = this.children) != null ? _c : this.children = /* @__PURE__ */ new Set()).add(child);
  }
  append(child) {
    this._append(child);
    this.outerObject3d.add(child.outerObject3d);
  }
  attach(child) {
    this._append(child);
    this.outerObject3d.attach(child.outerObject3d);
  }
  dispose() {
    var _a, _b, _c;
    if (this.done)
      return this;
    super.dispose();
    appendableRoot.delete(this);
    emitSceneGraphChange();
    (_b = (_a = this.parent) == null ? void 0 : _a.children) == null ? void 0 : _b.delete(this);
    this.parent = void 0;
    (_c = this.outerObject3d.parent) == null ? void 0 : _c.remove(this.outerObject3d);
    if (this.children)
      for (const child of this.children)
        child.dispose();
    return this;
  }
};

// node_modules/lingo3d/lib/api/core/EventLoopItem.js
var EventLoopItem = class extends Appendable {
  constructor() {
    super(...arguments);
    __publicField(this, "_proxy");
    __publicField(this, "handles");
    __publicField(this, "_onLoop");
  }
  get proxy() {
    return this._proxy;
  }
  set proxy(val) {
    if (this._proxy === val)
      return;
    this._proxy && (this._proxy.__target = void 0);
    this._proxy = val;
    val && (val.__target = this);
  }
  timer(time, repeat, cb) {
    return this.watch(timer(time, repeat, cb));
  }
  beforeRender(cb) {
    return this.watch(onBeforeRender(cb));
  }
  queueMicrotask(cb) {
    queueMicrotask(() => !this.done && cb());
  }
  cancellable(cb) {
    return this.watch(new Cancellable(cb));
  }
  createEffect(cb, getStates) {
    return this.watch(createEffect(cb, getStates));
  }
  cancelHandle(name, lazyHandle) {
    var _a, _b;
    const handles = (_a = this.handles) != null ? _a : this.handles = /* @__PURE__ */ new Map();
    (_b = handles.get(name)) == null ? void 0 : _b.cancel();
    if (!lazyHandle)
      return;
    const handle = lazyHandle();
    handles.set(name, handle);
    return handle;
  }
  dispose() {
    if (this.done)
      return this;
    super.dispose();
    if (this.handles)
      for (const handle of this.handles.values())
        handle.cancel();
    return this;
  }
  get onLoop() {
    return this._onLoop;
  }
  set onLoop(cb) {
    this._onLoop = cb;
    this.cancelHandle("onLoop", cb && (() => onBeforeRender(cb)));
  }
};

// node_modules/lingo3d/lib/states/useDefaultLight.js
var [setDefaultLight, getDefaultLight] = store("default");

// node_modules/lingo3d/lib/states/useDefaultLightScale.js
var [setDefaultLightScale, getDefaultLightScale] = store(1);

// node_modules/lingo3d/lib/interface/utils/nonEditorSchemaSet.js
var nonEditorSchemaSet = /* @__PURE__ */ new Set();
var nonEditorSchemaSet_default = nonEditorSchemaSet;
var hideSchema = (props) => {
  for (const prop of props)
    nonEditorSchemaSet.add(prop);
};

// node_modules/lingo3d/lib/interface/IEventLoop.js
var eventLoopSchema = {
  onLoop: Function,
  proxy: Object
};
hideSchema(["proxy"]);
var eventLoopDefaults = {
  onLoop: void 0,
  proxy: void 0
};

export {
  onSceneGraphChange,
  emitSceneGraphChange,
  appendableRoot,
  hiddenAppendables,
  Appendable,
  nonEditorSchemaSet_default,
  hideSchema,
  eventLoopSchema,
  eventLoopDefaults,
  setAntiAlias,
  getAntiAlias,
  setBackgroundColor,
  getBackgroundColor,
  setEffectComposerPassCount,
  setLogarithmicDepth,
  getLogarithmicDepth,
  getRenderer,
  timer,
  loop,
  EventLoopItem,
  setDefaultLight,
  getDefaultLight,
  setDefaultLightScale,
  getDefaultLightScale
};
//# sourceMappingURL=chunk-MO2ISMHQ.js.map
