import {
  container,
  mouseEvents,
  setPickingMode
} from "./chunk-NMHDQJPG.js";
import "./chunk-NPOYVG57.js";
import "./chunk-MO2ISMHQ.js";
import {
  getCameraRendered
} from "./chunk-J7HA7FW3.js";
import {
  store
} from "./chunk-NXCTIVNA.js";
import "./chunk-57VJUUAA.js";
import "./chunk-XA4H47DG.js";

// node_modules/lingo3d/lib/states/useCameraPointerLock.js
var [setCameraPointerLock, getCameraPointerLock] = store(void 0);

// node_modules/lingo3d/lib/display/core/CameraBase/enableMouseControl.js
function enableMouseControl_default() {
  if (this.done)
    return;
  this.createEffect(() => {
    if (this.mouseControlState.get() !== true || getCameraRendered() !== this.camera)
      return;
    setPickingMode("camera");
    return () => {
      setPickingMode("mouse");
    };
  }, [this.mouseControlState.get, getCameraRendered]);
  this.createEffect(() => {
    if (getCameraRendered() !== this.camera || !this.mouseControlState.get())
      return;
    if (getCameraPointerLock() === this.camera) {
      const handleMove2 = (e) => this.gyrate(e.movementX, e.movementY);
      document.addEventListener("mousemove", handleMove2);
      return () => {
        document.removeEventListener("mousemove", handleMove2);
      };
    }
    let started = false;
    let xOld;
    let yOld;
    const handle0 = mouseEvents.on("down", () => (started = true, [xOld, yOld] = [void 0, void 0]));
    const handle1 = mouseEvents.on("up", () => started = false);
    const handleMove = (e) => {
      xOld === void 0 && (xOld = e.clientX);
      yOld === void 0 && (yOld = e.clientY);
      const [movementX, movementY] = [e.clientX - xOld, e.clientY - yOld];
      [xOld, yOld] = [e.clientX, e.clientY];
      started && this.gyrate(movementX / window.innerWidth * 3e3, movementY / window.innerHeight * 3e3);
    };
    container.addEventListener("pointermove", handleMove);
    return () => {
      handle0.cancel();
      handle1.cancel();
      container.removeEventListener("pointermove", handleMove);
      started = false;
    };
  }, [this.mouseControlState.get, getCameraRendered, getCameraPointerLock]);
  this.createEffect(() => {
    const camera = getCameraRendered();
    if (this.mouseControlState.get() !== true || camera !== this.camera)
      return;
    const onClick = () => {
      var _a, _b;
      return (_b = (_a = container).requestPointerLock) == null ? void 0 : _b.call(_a);
    };
    const onPointerLockChange = () => {
      if (document.pointerLockElement === container)
        setCameraPointerLock(camera);
      else
        setCameraPointerLock(void 0);
    };
    container.addEventListener("click", onClick);
    document.addEventListener("pointerlockchange", onPointerLockChange);
    return () => {
      container.removeEventListener("click", onClick);
      document.removeEventListener("pointerlockchange", onPointerLockChange);
      document.exitPointerLock();
      setCameraPointerLock(void 0);
    };
  }, [this.mouseControlState.get, getCameraRendered]);
}
export {
  enableMouseControl_default as default
};
//# sourceMappingURL=enableMouseControl-5R4VLCID.js.map
