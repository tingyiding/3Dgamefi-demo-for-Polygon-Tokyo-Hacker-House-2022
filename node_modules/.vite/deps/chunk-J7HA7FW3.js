import {
  createEffect,
  event_default,
  last,
  pull2 as pull,
  push,
  store
} from "./chunk-NXCTIVNA.js";
import {
  OrthographicCamera,
  PerspectiveCamera,
  Quaternion,
  Vector3
} from "./chunk-57VJUUAA.js";

// node_modules/lingo3d/lib/events/onBeforeRender.js
var [emitBeforeRender, onBeforeRender] = event_default();

// node_modules/lingo3d/lib/events/onAfterRender.js
var [emitAfterRender, onAfterRender] = event_default();

// node_modules/lingo3d/lib/display/utils/getWorldPosition.js
var cache = /* @__PURE__ */ new WeakMap();
var getWorldPosition_default = (object3d) => {
  if (cache.has(object3d))
    return cache.get(object3d).clone();
  const result = object3d.getWorldPosition(new Vector3());
  cache.set(object3d, result.clone());
  onAfterRender(() => cache.delete(object3d), true);
  return result;
};

// node_modules/lingo3d/lib/display/utils/getWorldQuaternion.js
var cache2 = /* @__PURE__ */ new WeakMap();
var getWorldQuaternion_default = (object3d) => {
  if (cache2.has(object3d))
    return cache2.get(object3d).clone();
  const result = object3d.getWorldQuaternion(new Quaternion());
  cache2.set(object3d, result.clone());
  onAfterRender(() => cache2.delete(object3d), true);
  return result;
};

// node_modules/lingo3d/lib/engine/constants.js
var scale = 100;
var scaleDown = 1 / scale;
var scaleUp = scale;
var camNear = 0.1;
var camFar = 1e4;
var flatGeomScaleZ = Number.EPSILON;
var diameterScaled = 100 * scaleDown;
var radiusScaled = diameterScaled * 0.5;

// node_modules/lingo3d/lib/engine/interpolationCamera.js
var interpolationCamera_default = new PerspectiveCamera(75, 1, camNear, camFar);

// node_modules/lingo3d/lib/engine/mainCamera.js
var mainCamera_default = new PerspectiveCamera(75, 1, camNear, camFar);

// node_modules/lingo3d/lib/states/useCameraStack.js
var [setCameraStack, getCameraStack] = store([mainCamera_default]);
var pushCameraStack = push(setCameraStack, getCameraStack);
var pullCameraStack = pull(setCameraStack, getCameraStack);

// node_modules/lingo3d/lib/states/useCameraFrom.js
var [setCameraFrom, getCameraFrom] = store(void 0);

// node_modules/lingo3d/lib/globals.js
var WIDTH = 375;
var HEIGHT = 667;
var MIN_POLAR_ANGLE = 5;
var MAX_POLAR_ANGLE = 175;
var ORTHOGRAPHIC_FRUSTUM = 5.7;
var DUMMY_URL = "https://unpkg.com/lingo3d-dummy@1.0.4/assets/";
var YBOT_URL = DUMMY_URL + "ybot.fbx";

// node_modules/lingo3d/lib/states/useResolution.js
var [_setResolution, getResolution] = store([WIDTH, HEIGHT]);
var setResolution = ([w, h]) => _setResolution([Math.max(w, 1), Math.max(h, 1)]);

// node_modules/lingo3d/lib/states/useVR.js
var [setVR, getVR] = store(false);

// node_modules/lingo3d/lib/states/useCameraRendered.js
var [setCameraRendered, getCameraRendered] = store(mainCamera_default);
var updateCameraAspect = (camera) => {
  const [resX, resY] = getResolution();
  const aspect = resX / resY;
  if (camera instanceof PerspectiveCamera && !getVR()) {
    camera.aspect = aspect;
    camera.updateProjectionMatrix();
  } else if (camera instanceof OrthographicCamera) {
    [camera.left, camera.right, camera.top, camera.bottom] = [
      aspect * ORTHOGRAPHIC_FRUSTUM * -0.5,
      aspect * ORTHOGRAPHIC_FRUSTUM * 0.5,
      ORTHOGRAPHIC_FRUSTUM * 0.5,
      ORTHOGRAPHIC_FRUSTUM * -0.5
    ];
    camera.updateProjectionMatrix();
  }
  return [resX, resY, aspect];
};
var lerp = (a, b, t) => a + (b - a) * t;
createEffect(() => {
  const cameraFrom = getCameraRendered() === interpolationCamera_default ? interpolationCamera_default : getCameraFrom();
  const cameraTo = last(getCameraStack());
  const transition = cameraTo.userData.transition;
  if (!cameraFrom || !transition || cameraFrom === cameraTo) {
    setCameraRendered(cameraTo);
    return;
  }
  setCameraRendered(interpolationCamera_default);
  const positionFrom = getWorldPosition_default(cameraFrom);
  const quaternionFrom = getWorldQuaternion_default(cameraFrom);
  interpolationCamera_default.zoom = cameraFrom.zoom;
  interpolationCamera_default.fov = cameraFrom.fov;
  updateCameraAspect(interpolationCamera_default);
  let alpha = 0;
  const diffMax = typeof transition === "number" ? transition : Infinity;
  const handle = onBeforeRender(() => {
    const positionTo = getWorldPosition_default(cameraTo);
    const quaternionTo = getWorldQuaternion_default(cameraTo);
    interpolationCamera_default.position.lerpVectors(positionFrom, positionTo, alpha);
    interpolationCamera_default.quaternion.slerpQuaternions(quaternionFrom, quaternionTo, alpha);
    interpolationCamera_default.zoom = lerp(cameraFrom.zoom, cameraTo.zoom, alpha);
    interpolationCamera_default.fov = lerp(cameraFrom.fov, cameraTo.fov, alpha);
    interpolationCamera_default.updateProjectionMatrix();
    alpha = Math.min((1 - alpha) * 0.1, diffMax) + alpha;
    if (alpha < 0.999)
      return;
    setCameraRendered(cameraTo);
    updateCameraAspect(cameraTo);
    handle.cancel();
  });
  return () => {
    handle.cancel();
  };
}, [getCameraStack]);

// node_modules/lingo3d/lib/states/useSelection.js
var [setSelection, getSelection] = store(false);

// node_modules/lingo3d/lib/states/useEditorActive.js
var [setEditorActive, getEditorActive] = store(false);
createEffect(() => {
  setEditorActive(getSelection() && getCameraRendered() === mainCamera_default);
}, [getSelection, getCameraRendered]);

export {
  emitBeforeRender,
  onBeforeRender,
  scaleDown,
  scaleUp,
  camNear,
  camFar,
  flatGeomScaleZ,
  diameterScaled,
  radiusScaled,
  mainCamera_default,
  setCameraStack,
  getCameraStack,
  pushCameraStack,
  pullCameraStack,
  setCameraFrom,
  WIDTH,
  HEIGHT,
  MIN_POLAR_ANGLE,
  MAX_POLAR_ANGLE,
  DUMMY_URL,
  YBOT_URL,
  getResolution,
  setResolution,
  getVR,
  emitAfterRender,
  onAfterRender,
  getWorldPosition_default,
  getWorldQuaternion_default,
  getCameraRendered,
  updateCameraAspect,
  setSelection,
  getSelection,
  setEditorActive,
  getEditorActive
};
//# sourceMappingURL=chunk-J7HA7FW3.js.map
