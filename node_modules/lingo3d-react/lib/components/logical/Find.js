import React, { useContext, useLayoutEffect, useState } from "react";
import useDiffProps from "../../hooks/useDiffProps";
import { applyChanges, ParentContext } from "../../hooks/useManager";
const Find = React.forwardRef(({ name, onLoad, ...p }, ref) => {
    const parent = useContext(ParentContext);
    const [manager, setManager] = useState();
    useLayoutEffect(() => {
        if (!parent || !name)
            return;
        if ("loaded" in parent) {
            const handle = parent.loaded.then(() => {
                setManager(parent.find(name));
            });
            return () => {
                handle.cancel();
            };
        }
        setManager(parent.find(name));
    }, [parent, name]);
    const [changed, removed] = useDiffProps(p, !manager);
    manager && applyChanges(manager, changed, removed);
    useLayoutEffect(() => {
        if (!ref || !manager)
            return;
        if (typeof ref === "function")
            ref(manager);
        else
            ref.current = manager;
    }, [ref, manager]);
    useLayoutEffect(() => {
        manager && (onLoad === null || onLoad === void 0 ? void 0 : onLoad());
    }, [manager]);
    return React.createElement(ParentContext.Provider, { value: manager }, p.children);
});
export default Find;
