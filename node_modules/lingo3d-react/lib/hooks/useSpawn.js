import { useMemoOnce } from "@lincode/hooks";
import { nanoid } from "nanoid";
import { useRef, useState } from "react";
export default (o) => {
    const doneRef = useRef(false);
    const optionSet = useMemoOnce(() => new Set(), undefined, () => doneRef.current = true);
    const [options, setOptions] = useState([]);
    const spawn = (_o) => {
        var _a;
        if (doneRef.current)
            return;
        const options = { ...o, ..._o };
        (_a = options.id) !== null && _a !== void 0 ? _a : (options.id = nanoid());
        optionSet.add(options);
        setOptions([...optionSet]);
        options.lifetime && setTimeout(() => {
            if (doneRef.current)
                return;
            optionSet.delete(options);
            setOptions([...optionSet]);
        }, options.lifetime);
    };
    return [options, spawn];
};
