import { useRef } from "react";
export default (props, paused) => {
    const propsOldRef = useRef({});
    const changes = [];
    const removed = [];
    if (paused)
        return [changes, removed];
    const propsOld = propsOldRef.current;
    for (const [key, value] of Object.entries(props)) {
        if (key === "children")
            continue;
        const valueOld = propsOld[key];
        if (valueOld === value)
            continue;
        if (value && typeof value === "object") {
            if (JSON.stringify(value) !== JSON.stringify(valueOld))
                changes.push([key, value]);
        }
        else
            changes.push([key, value]);
    }
    for (const key of Object.keys(propsOld))
        !(key in props) && removed.push(key);
    propsOldRef.current = props;
    return [changes, removed];
};
